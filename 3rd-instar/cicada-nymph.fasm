;;;; before you compile the code
;;;; do not forget to choose your platform
;;;; in the following code

linux? equ yes
windows? equ no

;; in fasm, "dup" is a reserved word
dup equ duplicate

;; in fasm, "end" is a reserved word
finish equ end
end equ exit

if linux? eq yes

define sys_6_r8  r8
define sys_5_r9  r9
define sys_4_r10 r10
define sys_3_rdx rdx
define sys_2_rsi rsi
define sys_1_rdi rdi
define sys_n_rax rax

;; the only three linux syscall we will use
define syscall_read    0
define syscall_write   1
define syscall_exit    60

finish if

if linux? eq yes

format elf64 executable 3

finish if

if linux? eq yes

entry begin_to_interpret_threaded_code
segment readable executable writeable

finish if

if windows? eq yes

STD_INPUT_HANDLE     = -10
STD_OUTPUT_HANDLE    = -11

define fun_4_r9   r9
define fun_3_r8   r8
define fun_2_rdx  rdx
define fun_1_rcx  rcx

finish if

if windows? eq yes

format PE64 console

finish if

if windows? eq yes

entry begin_to_interpret_threaded_code
section '.text' code writeable readable executable

finish if

jo_size = 8 ;; (byte)
xx equ dq

;; if you want to extend cicada in assembly
;; the following registers must NOT be used

;; =================================
define pointer$argument_stack   r15
define pointer$return_stack     r14
;; =================================

macro push_argument_stack register {
   mov [pointer$argument_stack], register
   add pointer$argument_stack, jo_size
   }
macro pop_argument_stack register {
   sub pointer$argument_stack, jo_size
   mov register, [pointer$argument_stack]
   }

macro push_return_stack register {
   mov [pointer$return_stack], register
   add pointer$return_stack, jo_size
   }
macro pop_return_stack register {
   sub pointer$return_stack, jo_size
   mov register, [pointer$return_stack]
   }

current_free_address$un_initialized_memory = address$un_initialized_memory

labeling  equ = current_free_address$un_initialized_memory
preserve  equ current_free_address$un_initialized_memory = current_free_address$un_initialized_memory +

macro next {
   pop_return_stack rbx
     mov rax, qword [rbx]
   add rbx, jo_size
   push_return_stack rbx
     jmp qword [rax]
}

if linux? eq yes

__exit_with_TOS:
   pop_argument_stack sys_1_rdi
   mov sys_n_rax, syscall_exit
   syscall

finish if

if linux? eq yes

__exit_with_zero:
   xor sys_1_rdi, sys_1_rdi
   mov sys_n_rax, syscall_exit
   syscall

finish if

if linux? eq yes

__exit_with_six:
   mov sys_1_rdi, 6
   mov sys_n_rax, syscall_exit
   syscall

finish if

if windows? eq yes

__exit_with_TOS:
   number_of_arguments = 4
   push rbp
   mov rbp, rsp

   mov rax, rsp
   add rax, 8*number_of_arguments
   mov rbx, 1111b
   and rbx, rax

   sub rsp, 16
   add rsp, rbx

   sub rsp, 8*4
   pop_argument_stack fun_1_rcx
   call [ExitProcess]

   mov rsp, rbp
   pop rbp

finish if

if windows? eq yes

__exit_with_zero:
   number_of_arguments = 4
   push rbp
   mov rbp, rsp

   mov rax, rsp
   add rax, 8*number_of_arguments
   mov rbx, 1111b
   and rbx, rax

   sub rsp, 16
   add rsp, rbx

   sub rsp, 8*4
   xor fun_1_rcx, fun_1_rcx
   call [ExitProcess]

   mov rsp, rbp
   pop rbp

finish if

if windows? eq yes

__exit_with_six:
   number_of_arguments = 4
   push rbp
   mov rbp, rsp

   mov rax, rsp
   add rax, 8*number_of_arguments
   mov rbx, 1111b
   and rbx, rax

   sub rsp, 16
   add rsp, rbx

   sub rsp, 8*4
   mov fun_1_rcx, 15
   call [ExitProcess]

   mov rsp, rbp
   pop rbp

finish if

;; initial link to point to 0 (as null)
link = 0

size$primitive_string_heap = 100 * 1024 ;; (byte)

address$primitive_string_heap:
   times size$primitive_string_heap db 0

current_free_address$primitive_string_heap = address$primitive_string_heap

macro make_primitive_string string {

virtual at 0
.start$string:
   db string
.end$string:
   dw (.end$string - .start$string)
   load .length word from (.end$string)
finish virtual
store word .length at (current_free_address$primitive_string_heap)

current_free_address$primitive_string_heap = current_free_address$primitive_string_heap + 2

repeat .length
   virtual at 0
      db string
      load .char byte from (% - 1)
   finish virtual
   store byte .char at (current_free_address$primitive_string_heap)
   current_free_address$primitive_string_heap = current_free_address$primitive_string_heap + 1
finish repeat

}

macro define_function string, jo {

define_function__#jo:

name__#jo:
   xx current_free_address$primitive_string_heap

   make_primitive_string string

link__#jo:
   xx link
   link = link__#jo

jo:
   xx explain$function

   ;; here follows a jojo as function-body

   }

explain$function:
   add rax, jo_size
   push_return_stack rax
   next

macro define_primitive_function string, jo {

define_primitive_function__#jo:

name__#jo:
   xx current_free_address$primitive_string_heap

   make_primitive_string string

link__#jo:
   xx link
   link = link__#jo

jo:
   xx assembly_code__#jo

assembly_code__#jo:

   ;; here follows assembly code
   ;; as primitive function body

   }

macro define_variable string, jo {

define_variable__#jo:

name__#jo:
   xx current_free_address$primitive_string_heap

   make_primitive_string string

link__#jo:
   xx link
   link = link__#jo

jo:
   xx explain$variable

   ;; here follows a value of jo_size
   ;; only one value is allowed

   }

explain$variable:
   add rax, jo_size
   mov rbx, [rax]
   push_argument_stack rbx
   next

define_primitive_function "end", end
   pop_return_stack rbx
   next

define_primitive_function "<>", taca
   pop_return_stack rbx
   mov rax, qword [rbx]
   jmp qword [rax]

if linux? eq yes

begin_to_interpret_threaded_code:

   cld ;; set DF = 0, then rsi and rdi are incremented

   mov pointer$argument_stack,  address$argument_stack
   mov pointer$return_stack,    address$return_stack

   mov rax, first_jojo
   push_return_stack rax
   next

finish if

if windows? eq yes

;;;; for windows
_output_handle:
   dq 0
_input_handle:
   dq 0
;;;;

begin_to_interpret_threaded_code:

   cld ;; set DF = 0, then rsi and rdi are incremented


   ;;;; for windows
   number_of_arguments = 4
   push rbp
   mov rbp, rsp
   mov rax, rsp
   add rax, 8*number_of_arguments

   mov rbx, 1111b
   and rbx, rax

   sub rsp, 16
   add rsp, rbx


   sub rsp, 8*4
   mov fun_1_rcx, STD_INPUT_HANDLE
   call [GetStdHandle]
   mov [_input_handle], rax


   mov rsp, rbp
   pop rbp



   number_of_arguments = 4
   push rbp
   mov rbp, rsp

   mov rax, rsp
   add rax, 8*number_of_arguments
   mov rbx, 1111b
   and rbx, rax

   sub rsp, 16
   add rsp, rbx

   sub rsp, 8*4
   mov fun_1_rcx, STD_OUTPUT_HANDLE
   call [GetStdHandle]
   mov [_output_handle], rax

   mov rsp, rbp
   pop rbp
   ;;;;


   mov pointer$argument_stack,  address$argument_stack
   mov pointer$return_stack,    address$return_stack

   mov rax, first_jojo
   push_return_stack rax
   next

finish if

first_jojo:
   xx little_test

define_primitive_function "bye", exit_with_TOS
   call __exit_with_TOS

define_variable "", V__little_test_number
   xx 3


define_function "little_test", little_test

   ;;;; variable
   ;; xx V__little_test_number
   ;; xx exit_with_TOS
   ;;;; 3

   ;;;; literal
   ;; xx literal, 4
   ;; xx exit_with_TOS
   ;;;; 4

   ;;;; address
   ;; xx address, V__little_test_number, fetch, add2
   ;; xx address, V__little_test_number, save
   ;; xx V__little_test_number
   ;; xx exit_with_TOS
   ;;;; 5

   ;;;; write_byte
   ;xx literal, 64, write_byte
   ;xx literal, 10, write_byte
   ;xx zero
   ;xx exit_with_TOS
   ;;;; @

   ;;;; read_byte
   ;xx read_byte, write_byte
   ;xx exit_with_TOS
   ;;;;

   ;;;; branch
   ;xx read_byte, write_byte
   ;xx branch, -3
   ;;;; read a string that ended by <return>
   ;;;; write the readed string
   ;;;; or we can say
   ;;;; read line and write line
   ;;;; or we can say
   ;;;; echo line

   ;;;; false?branch
   xx false, false?branch, 9
   xx   literal, 64, write_byte
   xx   literal, 10, write_byte
   xx   zero
   xx   exit_with_TOS
   xx true, false?branch, 9
   xx   literal, 65, write_byte
   xx   literal, 10, write_byte
   xx   zero
   xx   exit_with_TOS
   xx zero
   xx exit_with_TOS
   ;;;; A

preserve 64 * jo_size
address$argument_stack labeling
   preserve 1024 * 1024 * jo_size

define_primitive_function "drop", drop
   ;; << a -- >>
   pop_argument_stack rax
   next

define_primitive_function "drop2", drop2
   ;; << a b -- >>
   pop_argument_stack rax
   pop_argument_stack rax
   next

define_primitive_function "dup", dup
   ;; << a -- a a >>
   mov  rax, [pointer$argument_stack - (1 * jo_size)]
   push_argument_stack rax
   next

define_primitive_function "dup2", dup2
   ;; << a b -- a b a b >>
   mov  rbx, [pointer$argument_stack - (1 * jo_size)]
   mov  rax, [pointer$argument_stack - (2 * jo_size)]
   push_argument_stack rax
   push_argument_stack rbx
   next

define_primitive_function "over", over
   ;; << a b -- a b | a >>
   mov  rax, [pointer$argument_stack - (2 * jo_size)]
   push_argument_stack rax
   next

define_primitive_function "x|over|xx", xoverxx
   ;; << a | b c -- a | b c | a >>
   mov  rax, [pointer$argument_stack - (3 * jo_size)]
   push_argument_stack rax
   next

define_primitive_function "xx|over|x", xxoverx
   ;; << a b | c -- a b | c | a b >>
   mov  rax, [pointer$argument_stack - (3 * jo_size)]
   push_argument_stack rax
   mov  rax, [pointer$argument_stack - (3 * jo_size)]
   push_argument_stack rax
   next

define_primitive_function "xx|over|xx", xxoverxx
   ;; << a b | c d -- a b | c d | a b >>
   mov  rax, [pointer$argument_stack - (4 * jo_size)]
   push_argument_stack rax
   mov  rax, [pointer$argument_stack - (4 * jo_size)]
   push_argument_stack rax
   next

define_primitive_function "x|over|xxx", xoverxxx
   ;; << a | b c d -- a | b c d | a >>
   mov  rax, [pointer$argument_stack - (4 * jo_size)]
   push_argument_stack rax
   next

define_primitive_function "xx|over|xxxx", xxoverxxxx
   ;; << a b | c d e f -- a b | c d e f | a b >>
   mov  rax, [pointer$argument_stack - (6 * jo_size)]
   push_argument_stack rax
   mov  rax, [pointer$argument_stack - (6 * jo_size)]
   push_argument_stack rax
   next

define_primitive_function "tuck", tuck
   ;; << a b -- b | a b >>
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rax
   push_argument_stack rbx
   next

define_primitive_function "x|tuck|xx", xtuckxx
   ;; << a | b c -- b c | a | b c >>
   pop_argument_stack rcx
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rcx
   push_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rcx
   next

define_primitive_function "xx|tuck|x", xxtuckx
   ;; << a b | c -- c | a b | c >>
   pop_argument_stack rcx
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rcx
   push_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rcx
   next

define_primitive_function "xx|tuck|xx", xxtuckxx
   ;; << a b | c d -- c d | a b | c d >>
   pop_argument_stack rdx
   pop_argument_stack rcx
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rcx
   push_argument_stack rdx
   push_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rcx
   push_argument_stack rdx
   next

define_primitive_function "xxx|tuck|x", xxxtuckx
   ;; << a b c | d -- d | a b c | d >>
   pop_argument_stack rdx
   pop_argument_stack rcx
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rdx
   push_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rcx
   push_argument_stack rdx
   next

define_primitive_function "swap", swap
   ;; << a b -- b a >>
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rax
   next

define_primitive_function "x|swap|xx", xswapxx
   ;; << a | b c -- b c | a >>
   pop_argument_stack rcx
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rcx
   push_argument_stack rax
   next

define_primitive_function "xx|swap|x", xxswapx
   ;; << a b | c -- c | a b >>
   pop_argument_stack rcx
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rcx
   push_argument_stack rax
   push_argument_stack rbx
   next

define_primitive_function "x|swap|xxx", xswapxxx
   ;; << a | b c d -- b c d | a >>
   pop_argument_stack rdx
   pop_argument_stack rcx
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rcx
   push_argument_stack rdx
   push_argument_stack rax
   next

define_primitive_function "xxx|swap|x", xxxswapx
   ;; << a b c | d -- d | a b c >>
   pop_argument_stack rdx
   pop_argument_stack rcx
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rdx
   push_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rcx
   next

define_primitive_function "xx|swap|xx", xxswapxx
   ;; << a b | c d -- c d | a b >>
   pop_argument_stack rdx
   pop_argument_stack rcx
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rcx
   push_argument_stack rdx
   push_argument_stack rax
   push_argument_stack rbx
   next


define_primitive_function "x|swap|xxxx", xswapxxxx
   ;; << a | b c d e -- b c d e | a >>
   pop_argument_stack r8 ;; e
   pop_argument_stack rdx
   pop_argument_stack rcx
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rcx
   push_argument_stack rdx
   push_argument_stack r8 ;; e
   push_argument_stack rax
   next

define_primitive_function "xxxx|swap|x", xxxxswapx
   ;; << a b c d | e --  e | a b c d >>
   pop_argument_stack r8 ;; e
   pop_argument_stack rdx
   pop_argument_stack rcx
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack r8 ;; e
   push_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rcx
   push_argument_stack rdx
   next


define_primitive_function "xx|swap|xxxx", xxswapxxxx
   ;; << a b | c d e f -- c d e f | a b >>
   pop_argument_stack r9 ;; f
   pop_argument_stack r8 ;; e
   pop_argument_stack rdx
   pop_argument_stack rcx
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack rcx
   push_argument_stack rdx
   push_argument_stack r8 ;; e
   push_argument_stack r9 ;; f
   push_argument_stack rax
   push_argument_stack rbx
   next

define_primitive_function "xxxx|swap|xx", xxxxswapxx
   ;; << a b c d | e f --  e f | a b c d >>
   pop_argument_stack r9 ;; f
   pop_argument_stack r8 ;; e
   pop_argument_stack rdx
   pop_argument_stack rcx
   pop_argument_stack rbx
   pop_argument_stack rax
   push_argument_stack r8 ;; e
   push_argument_stack r9 ;; f
   push_argument_stack rax
   push_argument_stack rbx
   push_argument_stack rcx
   push_argument_stack rdx
   next

preserve 64 * jo_size
address$return_stack labeling
   preserve 1024 * 1024 * jo_size

define_variable "*literal*", V__literal
   xx literal

define_primitive_function "", literal
   ;; << -- fixnum >>
   pop_return_stack rbx
     mov rax, [rbx]
     push_argument_stack rax
   add rbx, jo_size
   push_return_stack rbx
   next

define_variable "*address*", V__address
   xx address

define_primitive_function "", address
   ;; << -- address >>
   pop_return_stack rbx
     mov rax, [rbx]
     add rax, jo_size
     push_argument_stack rax
   add rbx, jo_size
   push_return_stack rbx
   next

define_variable "*branch*", V__branch
   xx branch

define_primitive_function "", branch
   pop_return_stack rbx
   mov rax, [rbx]
   imul rax, jo_size
   add rbx, rax
   push_return_stack rbx
   next

define_variable "*false?branch*", V__false?branch
   xx false?branch

define_primitive_function "", false?branch
   ;; << true of false -- >>
   pop_argument_stack rax
   test rax, rax
   jnz help__false?branch__not_to_branch

   pop_return_stack rbx
   mov rax, [rbx]
   imul rax, jo_size
   add rbx, rax
   push_return_stack rbx
   next

help__false?branch__not_to_branch:
   pop_return_stack rbx
   add rbx, jo_size
   push_return_stack rbx
   next

define_primitive_function "false", false
   ;; << -- false >>
   xor rax, rax
   push_argument_stack rax
   next

define_primitive_function "true", true
   ;; << -- true >>
   xor rax, rax
   inc rax
   push_argument_stack rax
   next

define_function "false?", false?
   ;; << bool -- bool >>
   xx false, equal?
   xx end

define_function "true?", true?
   ;; << bool -- bool >>
   xx true, equal?
   xx end

define_primitive_function "bitwise-and", bitwise_and
   ;; << a, b -- a and b >>
   pop_argument_stack rbx
   and [pointer$argument_stack - (1 * jo_size)], rbx
   next

define_primitive_function "bitwise-or", bitwise_or
   ;; << a, b -- a or b >>
   pop_argument_stack rbx
   or  [pointer$argument_stack - (1 * jo_size)], rbx
   next

define_primitive_function "bitwise-xor", bitwise_xor
   ;; << a, b -- a xor b >>
   pop_argument_stack rbx
   xor [pointer$argument_stack - (1 * jo_size)], rbx
   next

define_primitive_function "bitwise-invert", bitwise_invert
   ;; << a -- invert a >>
   not qword [pointer$argument_stack - (1 * jo_size)]
   next

define_primitive_function "zero", zero
   ;; << -- 0 >>
   xor rax, rax
   push_argument_stack rax
   next

define_primitive_function "one", one
   ;; << -- 1 >>
   xor rax, rax
   inc rax
   push_argument_stack rax
   next

define_function "zero?", zero?
   ;; << bool -- bool >>
   xx zero, equal?
   xx end

define_function "one?", one?
   ;; << bool -- bool >>
   xx one, equal?
   xx end

define_primitive_function "add1", add1
   ;; << n -- n+1 >>
   inc qword [pointer$argument_stack - (1 * jo_size)]
   next

define_primitive_function "add2", add2
   ;; << n -- n+2 >>
   add qword [pointer$argument_stack - (1 * jo_size)], 2
   next

define_primitive_function "add3", add3
   ;; << n -- n+3 >>
   add qword [pointer$argument_stack - (1 * jo_size)], 3
   next

define_primitive_function "add4", add4
   ;; << n -- n+4 >>
   add qword [pointer$argument_stack - (1 * jo_size)], 4
   next

define_primitive_function "add8", add8
   ;; << n -- n+8 >>
   add qword [pointer$argument_stack - (1 * jo_size)], 8
   next


define_primitive_function "sub1", sub1
   ;; << n -- n-1 >>
   dec qword [pointer$argument_stack - (1 * jo_size)]
   next

define_primitive_function "sub2", sub2
   ;; << n -- n-2 >>
   sub qword [pointer$argument_stack - (1 * jo_size)], 2
   next

define_primitive_function "sub3", sub3
   ;; << n -- n-3 >>
   sub qword [pointer$argument_stack - (1 * jo_size)], 3
   next

define_primitive_function "sub4", sub4
   ;; << n -- n-4 >>
   sub qword [pointer$argument_stack - (1 * jo_size)], 4
   next

define_primitive_function "sub8", sub8
   ;; << n -- n-8 >>
   sub qword [pointer$argument_stack - (1 * jo_size)], 8
   next


define_primitive_function "add", addition
   ;; << a b -- a+b >>
   pop_argument_stack rax
   add qword [pointer$argument_stack - (1 * jo_size)], rax
   next

define_primitive_function "sub", subtraction
   ;; << a b -- a-b >>
   pop_argument_stack rax
   sub qword [pointer$argument_stack - (1 * jo_size)], rax
   next

define_primitive_function "mul", multiple
   ;; << a b -- a*b >>
   pop_argument_stack  rbx ;; 2ed arg
   pop_argument_stack  rax ;; 1st arg
   imul rbx, rax
   ;; imul will ignore overflow
   ;; when there are two registers as arg
   ;; imul will save the result into the first register
   push_argument_stack rbx
   next

define_primitive_function "moddiv", moddiv
   ;; << a, b -- a mod b, quotient >>
   ;; << dividend, divisor -- remainder, quotient >>
   ;; the arg of idiv is divisor
   ;; the lower half of dividend is taken from rax
   ;; the upper half of dividend is taken from rdx
   xor  rdx, rdx   ;; high-part of dividend is not used
   pop_argument_stack  rbx ;; 2ed arg
   pop_argument_stack  rax ;; 1st arg
   idiv rbx
   ;; the remainder is stored in rdx
   ;; the quotient  is stored in rax
   push_argument_stack rdx ;; remainder
   push_argument_stack rax ;; quotient
   next


define_function "divmod", divmod
   ;; << a, b -- quotient, a mod b >>
   xx moddiv, swap
   xx end

define_function "div", division
   ;; << a, b -- quotient >>
   xx divmod, drop
   xx end

define_function "mod", modulo
   ;; << a, b -- a mod b >>
   xx moddiv, drop
   xx end

define_function "negate", negate
   ;; << n --  -n >>
   xx zero
   xx swap, subtraction
   xx end


define_function "power", power
   ;; n must be nature number for now
   ;; << a, n -- a^n >>
   xx literal, 1, swap ;; leave product
   xx help__power
   xx end

define_function "help,power", help__power
   ;; << a, product, n -- a^n >>
   xx dup, zero?, false?branch, 5
   xx   drop, swap, drop
   xx   end
   xx sub1
   xx swap
   xx   xoverxx, multiple
   xx swap
   xx taca, help__power

define_primitive_function "equal?", equal?
   ;; << a, b -- a, b, true of false >>
   pop_argument_stack rbx
   pop_argument_stack rax
   cmp   rbx, rax
   sete  al
   movzx rax, al
   push_argument_stack rax
   next

define_primitive_function "less-than?", less_than?
   pop_argument_stack rbx
   pop_argument_stack rax
   cmp   rax, rbx
   setl  al
   movzx rax, al
   push_argument_stack rax
   next

define_primitive_function "greater-than?", greater_than?
   pop_argument_stack rbx
   pop_argument_stack rax
   cmp   rax, rbx
   setg  al
   movzx rax, al
   push_argument_stack  rax
   next

define_primitive_function "less-or-equal?", less_or_equal?
   pop_argument_stack rbx
   pop_argument_stack rax
   cmp   rax, rbx
   setle al
   movzx rax, al
   push_argument_stack rax
   next

define_primitive_function "greater-or-equal?", greater_or_equal?
   pop_argument_stack rbx
   pop_argument_stack rax
   cmp   rax, rbx
   setge al
   movzx rax, al
   push_argument_stack rax
   next

define_function "negative?", negative?
   ;; << integer -- bool >>
   xx zero, less_than?
   xx end

define_function "positive?", positive?
   ;; << integer -- bool >>
   xx negative?, false?
   xx end

;; "save" and "fetch" default to a jo_size
;; the rule of "fetch2" and so on are:
;;   in memory:
;;     ||  1 : value-1  ||
;;     ||  1 : value-2  ||
;;     ||  1 : value-3  ||
;;     ...
;;   on stack:
;;     << value-1, value-2, value-3, ... >>
;; of course we have:
;;   fetch2 : memory=copy=>stack
;;   save2  : stack->memory

define_primitive_function "save", save
   ;; ( value, address -- )
   pop_argument_stack rbx
   pop_argument_stack rax
   mov qword [rbx], rax
   next

define_primitive_function "save-byte", save_byte
   ;; ( value, address -- )
   pop_argument_stack rbx
   pop_argument_stack rax
   mov byte[rbx], al
   next

define_primitive_function "save-two-bytes", save_two_bytes
   ;; ( value, address -- )
   pop_argument_stack rbx
   pop_argument_stack rax
   mov word [rbx], ax
   next

define_primitive_function "save-four-bytes", save_four_bytes
   ;; ( value, address -- )
   pop_argument_stack rbx
   pop_argument_stack rax
   mov dword [rbx], eax
   next

define_primitive_function "n-save", n_save
   ;; << value-n, ..., value-1, address, n -- >>
   pop_argument_stack rcx
   pop_argument_stack rdx
   mov rax, jo_size
   imul rax, rcx
   add rdx, rax
   ;; for address is based on 0
   ;; but n is based on 1
   sub rdx, jo_size
.loop:
   pop_argument_stack rax
   mov qword [rdx], rax
   sub rdx, jo_size
   loop .loop
   next

define_function "save2", save2
   ;; << value-2, value-1, address -- >>
   xx literal, 2
   xx n_save
   xx end

define_primitive_function "n-save-byte", n_save_byte
   ;; << value-n, ..., value-1, address, n -- >>
   pop_argument_stack rcx
   pop_argument_stack rdx
   add rdx, rcx
   dec rdx
.loop:
   pop_argument_stack rax
   mov byte [rdx], al
   dec rdx
   loop .loop
   next

define_primitive_function "fetch", fetch
   ;; ( address -- value )
   pop_argument_stack  rbx
   mov rax, qword [rbx]
   push_argument_stack rax
   next

define_primitive_function "fetch-byte", fetch_byte
   ;; ( address -- value )
   pop_argument_stack rbx
   xor rax, rax
   mov al, byte[rbx]
   push_argument_stack rax
   next

define_primitive_function "fetch-two-bytes", fetch_two_bytes
   ;; ( address -- value )
   pop_argument_stack rbx
   xor rax, rax
   mov ax, word [rbx]
   push_argument_stack rax
   next

define_primitive_function "fetch-four-bytes", fetch_four_bytes
   ;; ( address -- value )
   pop_argument_stack rbx
   xor rax, rax
   mov eax, dword [rbx]
   push_argument_stack rax
   next

;;   in memory:
;;     ||  1 : value-1  ||
;;     ...
;;     ||  1 : value-n  ||
define_primitive_function "n-fetch", n_fetch
   ;; << address, n -- value-1, ..., value-n >>
   pop_argument_stack  rcx
   pop_argument_stack  rdx
.loop:
   mov rax, qword [rdx]
   push_argument_stack rax
   add rdx, jo_size
   loop .loop
   next

define_primitive_function "n-fetch-byte", n_fetch_byte
   ;; << address, n -- byte-1, ..., byte-n >>
   pop_argument_stack  rcx
   pop_argument_stack  rdx
   xor rax, rax
.loop:
   mov al, byte [rdx]
   push_argument_stack rax
   inc rdx
   loop .loop
   next

define_function "fetch2", fetch2
   ;; << address -- value-1, value-2 >>
   xx literal, 2
   xx n_fetch
   xx end

define_primitive_function "add-save", add_save
   ;; ( number to add, address -- )
   pop_argument_stack rbx
   pop_argument_stack rax
   add qword [rbx], rax
   next

define_primitive_function "sub-save", sub_save
   ;; ( number to add, address -- )
   pop_argument_stack rbx
   pop_argument_stack rax
   sub qword [rbx], rax
   next

max_input_length = 1024 * 1024

buffer$read_byte labeling
   preserve max_input_length

if linux? eq yes

buffer$write_byte:
   db 0

define_primitive_function "write-byte", write_byte
   ;; << byte -- >>
   ;; just calls the Linux write system call
   pop_argument_stack rax
   ;; write can not just write the char in al to stdout
   ;; write needs the address of the byte to write
   mov [buffer$write_byte], al

   ;;;; for linux
   mov sys_3_rdx, 1                 ;; max length to be write
   mov sys_2_rsi, buffer$write_byte ;; address
   mov sys_1_rdi, 1                 ;; stdout
   mov sys_n_rax, syscall_write
   ;;;;

   syscall
   next

finish if

if linux? eq yes

flag$unreaded_ket_char:
   xx 0

char$unreaded_ket_char:
   xx 0

define_function "have-unreaded-ket-char?", have_unreaded_ket_char?
   ;; << -- bool >>
   xx literal, flag$unreaded_ket_char
   xx fetch
   xx end

define_function "unread-ket-char", unread_ket_char
   ;; << char -- >>
   xx literal, char$unreaded_ket_char, save
   xx true, literal, flag$unreaded_ket_char
   xx save
   xx end


;; help__read_byte is the old do function without unread ket-char
define_function "read-byte", read_byte
   ;; << -- byte >>
   xx have_unreaded_ket_char?, false?branch, 9
   xx   literal, char$unreaded_ket_char, fetch_byte
   xx   zero, literal, flag$unreaded_ket_char
   xx   save
   xx   end
   xx help__read_byte
   xx end



cursor$read_byte:
   xx 0

border$read_byte:
   xx 0

define_primitive_function "help,read-byte", help__read_byte
   ;; << -- byte >>
   call help__help__read_byte
   push_argument_stack rax
   next


help__help__read_byte:
   mov rbx, [cursor$read_byte]
   cmp rbx, [border$read_byte]
   ;; [cursor$read_byte] <  [border$read_byte]
   jl .we_still_have_buffered_byte
   ;; [cursor$read_byte] >= [border$read_byte]
   jmp .do_a_new_buffer


.do_a_new_buffer:
   mov rbx, buffer$read_byte
   mov [cursor$read_byte], rbx
   mov [border$read_byte], rbx

   ;;;; for linux
   mov sys_3_rdx, max_input_length ;; max length to be read
   mov sys_2_rsi, buffer$read_byte ;; buffer address
   xor sys_1_rdi, sys_1_rdi        ;; stdin
   mov sys_n_rax, syscall_read
   syscall
   ;; the return value of syscall read
   ;; is a count of the number of bytes transferred
   ;;;;

   test rax, rax
   jz .error ;; rax = 0
   js .error ;; rax < 0

   ;; update [border$read_byte]
   add [border$read_byte], rax
   jmp help__help__read_byte


.we_still_have_buffered_byte:
   ;; for the following will just uses the al part of rax
   ;; it is necessary to clear rax
   xor rax, rax
   mov al, byte [rbx]
   inc rbx
   mov [cursor$read_byte], rbx
   ret


.error:
   ;; exit with exit code = 0
   call __exit_with_zero

finish if

if windows? eq yes

buffer$write_byte:
   db 0

;;;; for windows
_counter$write_byte:
   dq 0
;;;;

define_primitive_function "write-byte", write_byte
   ;; << byte -- >>
   ;; just calls the Linux write system call
   pop_argument_stack rax
   ;; write can not just write the char in al to stdout
   ;; write needs the address of the byte to write
   mov [buffer$write_byte], al

   ;;;; for windows
   number_of_arguments = 5
   push rbp
   mov rbp, rsp

   mov rax, rsp
   add rax, 8*number_of_arguments
   mov rbx, 1111b
   and rbx, rax

   sub rsp, 16
   add rsp, rbx


   push 0
   sub rsp, 8*4
   mov fun_4_r9, _counter$write_byte
   mov fun_3_r8, 1
   mov fun_2_rdx, buffer$write_byte
   mov fun_1_rcx, [_output_handle]
   call [WriteFile]


   mov rsp, rbp
   pop rbp
   ;;;;

   next

finish if

if windows? eq yes

flag$unreaded_ket_char:
   xx 0

char$unreaded_ket_char:
   xx 0

define_function "have-unreaded-ket-char?", have_unreaded_ket_char?
   ;; << -- bool >>
   xx literal, flag$unreaded_ket_char
   xx fetch
   xx end

define_function "unread-ket-char", unread_ket_char
   ;; << char -- >>
   xx literal, char$unreaded_ket_char, save
   xx true, literal, flag$unreaded_ket_char
   xx save
   xx end


;; help__read_byte is the old do function without unread ket-char
define_function "read-byte", read_byte
   ;; << -- byte >>
   xx have_unreaded_ket_char?, false?branch, 9
   xx   literal, char$unreaded_ket_char, fetch_byte
   xx   zero, literal, flag$unreaded_ket_char
   xx   save
   xx   end
   xx help__read_byte
   xx end

;;;; for windows
_counter$read_byte:
   dq 0
;;;;

cursor$read_byte:
   xx 0

border$read_byte:
   xx 0

define_primitive_function "help,read-byte", help__read_byte
   ;; << -- byte >>
   call help__help__read_byte
   push_argument_stack rax
   next


help__help__read_byte:
   mov rbx, [cursor$read_byte]
   cmp rbx, [border$read_byte]
   ;; [cursor$read_byte] <  [border$read_byte]
   jl .we_still_have_buffered_byte
   ;; [cursor$read_byte] >= [border$read_byte]
   jmp .do_a_new_buffer


.do_a_new_buffer:
   mov rbx, buffer$read_byte
   mov [cursor$read_byte], rbx
   mov [border$read_byte], rbx

   ;;;; for windows
   number_of_arguments = 5
   push rbp
   mov rbp, rsp

   mov rax, rsp
   add rax, 8*number_of_arguments
   mov rbx, 1111b
   and rbx, rax

   sub rsp, 16
   add rsp, rbx

   push 0
   sub rsp, 8*4
   mov fun_4_r9, _counter$read_byte
   mov fun_3_r8, max_input_length
   mov fun_2_rdx, buffer$read_byte
   mov fun_1_rcx, [_input_handle]
   call [ReadFile]

   mov rsp, rbp
   pop rbp
   ;;;;

   ;; the return value of syscall read
   ;; is a count of the number of bytes transferred

   ;;;; for windows
   mov rax, [_counter$read_byte]
   ;;;;

   test rax, rax
   jz .error ;; rax = 0
   js .error ;; rax < 0

   ;; update [border$read_byte]
   add [border$read_byte], rax
   jmp help__help__read_byte


.we_still_have_buffered_byte:
   ;; for the following will just uses the al part of rax
   ;; it is necessary to clear rax
   xor rax, rax
   mov al, byte [rbx]
   inc rbx
   mov [cursor$read_byte], rbx
   ret


.error:
   ;; exit with exit code = 0
   call __exit_with_zero


finish if

if linux? eq yes

size$un_initialized_memory = 64 * 1024 * 1024 ;; (byte)

segment readable writeable
address$un_initialized_memory:
   rb size$un_initialized_memory

finish if

if windows? eq yes

size$un_initialized_memory = 64 * 1024 * 1024 ;; (byte)

section '.data' data readable writeable
address$un_initialized_memory:
   rb size$un_initialized_memory

finish if

if windows? eq yes


;; Macroinstructions for making import section (64-bit)

macro library [name,string]
 { common
    import.data:
   forward
    local _label
    if defined name#.redundant
     if ~ name#.redundant
      dd RVA name#.lookup,0,0,RVA _label,RVA name#.address
     finish if
    finish if
    name#.referred = 1
   common
    dd 0,0,0,0,0
   forward
    if defined name#.redundant
     if ~ name#.redundant
      _label db string,0
             rb RVA $ and 1
     finish if
    finish if }

macro import name,[label,string]
 { common
    rb (- rva $) and 7
    if defined name#.referred
     name#.lookup:
   forward
     if used label
      if string eqtype ''
       local _label
       dq RVA _label
      else
       dq 8000000000000000h + string
      finish if
     finish if
   common
     if $ > name#.lookup
      name#.redundant = 0
      dq 0
     else
      name#.redundant = 1
     finish if
     name#.address:
   forward
     if used label
      if string eqtype ''
       label dq RVA _label
      else
       label dq 8000000000000000h + string
      finish if
     finish if
   common
     if ~ name#.redundant
      dq 0
     finish if
   forward
     if used label & string eqtype ''
     _label dw 0
            db string,0
            rb RVA $ and 1
     finish if
   common
    finish if }


section '.idata' import data readable writeable

library kernel32,'KERNEL32.DLL'

import kernel32,\
       ExitProcess,'ExitProcess',\
       ReadFile,'ReadFile',\
       WriteFile,'WriteFile',\
       GetStdHandle,'GetStdHandle'


finish if
