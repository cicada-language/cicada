#+TITLE:  齡一 / 1st-instar
#+AUTHOR: 謝宇恆 / XIE Yuheng
#+EMAIL:  xyheme@gmail.com

* ===================================
* prolog
** ----------------------------------
** note conditional preprocessing
   * flower bar-ket can not be nested in fasm's "match"
     so
     1. when defining macro conditionally
        one should use "if eq" & "finish if"
     2. when doing "define" or "equ"
        one should use "match { }"
** platform configuration
   #+begin_src fasm :tangle cicada-nymph.fasm
   ;;;; before you compile the code
   ;;;; do not forget to choose your platform
   ;;;; in the following code

   include "platform-configuration.inc"

   ;; define platform linux or windows
   ;; define machine  64bit or 32bit
   #+end_src
** misc
   #+begin_src fasm :tangle cicada-nymph.fasm
   ;; in fasm, "dup" is a reserved word
   dup equ duplicate

   ;; in fasm, "end" is a reserved word
   finish equ end
   end equ exit
   #+end_src
** ----------------------------------
** jo_size [32bit]
   #+begin_src fasm :tangle cicada-nymph.fasm
   match =32bit, machine {

   jo_size = 4 ;; (byte)
   xx equ dd

   }
   #+end_src
** ----------------------------------
** header        [linux32]
   #+begin_src fasm :tangle cicada-nymph.fasm
   match =linux =32bit, platform machine {


   define linux32_sys_6_ebp ebp
   define linux32_sys_5_edi edi
   define linux32_sys_4_esi esi
   define linux32_sys_3_edx edx
   define linux32_sys_2_ecx ecx
   define linux32_sys_1_ebx ebx
   define linux32_sys_n_eax eax

   define linux32_syscall_exit  1
   define linux32_syscall_read  3
   define linux32_syscall_write 4
   define linux32_syscall_open  5
   define linux32_syscall_close 6


   }
   #+end_src
** format header [linux32]
   #+begin_src fasm :tangle cicada-nymph.fasm
   match =linux =32bit, platform machine {

   format ELF executable 3

   }
   #+end_src
** entry         [linux32]
   #+begin_src fasm :tangle cicada-nymph.fasm
   match =linux =32bit, platform machine {

   entry begin_to_interpret_threaded_code
   segment readable executable writeable

   }
   #+end_src
** ----------------------------------
** memory allocation in un_initialized_memory
   * implemented as a memory map
   #+begin_src fasm :tangle cicada-nymph.fasm
   current_free_address$un_initialized_memory = address$un_initialized_memory

   labeling  equ = current_free_address$un_initialized_memory
   preserve  equ current_free_address$un_initialized_memory = current_free_address$un_initialized_memory +
   #+end_src
** ----------------------------------
* -----------------------------------
* note stack
  * when doing "push"
    a stack-pointer moves to lower address
  * note that another style is that
    when doing "push"
    a stack-pointer moves to higher address
  * the stack-pointer
    always stores the address of current-free-address of the stack
  * note that another style is that
    under the stack-pointer
    there always stores the value of the-top-of-the-stack
* argument_stack
** ----------------------------------
** memory allocation
   * for we do not build border-check
     into the interface of pop and push
     we allocation some memory below the stacks
   #+begin_src fasm :tangle cicada-nymph.fasm
      preserve 64 * jo_size
   address$argument_stack labeling
      preserve 1024 * 1024 * jo_size
   #+end_src
** ----------------------------------
** pointer    [32bit]
   #+begin_src fasm :tangle cicada-nymph.fasm
   match =32bit, machine {

   pointer$argument_stack:
      xx address$argument_stack

   }
   #+end_src
** push & pop [32bit]
   #+begin_src fasm :tangle cicada-nymph.fasm
   match =32bit, machine {

   macro push_argument_stack register \{
      if register in <eax>
      push ebx
      mov ebx, [pointer$argument_stack]
      mov [ebx], register
      add ebx, jo_size
      mov [pointer$argument_stack], ebx
      pop ebx
      else
      push eax
      mov eax, [pointer$argument_stack]
      mov [eax], register
      add eax, jo_size
      mov [pointer$argument_stack], eax
      pop eax
      finish if
   \}

   macro pop_argument_stack register \{
      if register in <eax>
      mov ebx, [pointer$argument_stack]
      sub ebx, jo_size
      mov register, [ebx]
      mov [pointer$argument_stack], ebx
      else
      mov eax, [pointer$argument_stack]
      sub eax, jo_size
      mov register, [eax]
      mov [pointer$argument_stack], eax
      finish if
   \}

   }
   #+end_src
** ----------------------------------
* return_stack
** ----------------------------------
** memory allocation
   #+begin_src fasm :tangle cicada-nymph.fasm
      preserve 64 * jo_size
   address$return_stack labeling
      preserve 1024 * 1024 * jo_size
   #+end_src
** ----------------------------------
** pointer    [32bit]
   #+begin_src fasm :tangle cicada-nymph.fasm
   match =32bit, machine {

   pointer$return_stack:
      xx address$return_stack

   }
   #+end_src
** push & pop [32bit]
   #+begin_src fasm :tangle cicada-nymph.fasm
   match =32bit, machine {

   macro push_return_stack register \{
      if register in <eax>
      push ebx
      mov ebx, [pointer$return_stack]
      mov [ebx], register
      add ebx, jo_size
      mov [pointer$return_stack], ebx
      pop ebx
      else
      push eax
      mov eax, [pointer$return_stack]
      mov [eax], register
      add eax, jo_size
      mov [pointer$return_stack], eax
      pop eax
      finish if
   \}

   macro pop_return_stack register \{
      if register in <eax>
      mov ebx, [pointer$return_stack]
      sub ebx, jo_size
      mov register, [ebx]
      mov [pointer$return_stack], ebx
      else
      mov eax, [pointer$return_stack]
      sub eax, jo_size
      mov register, [eax]
      mov [pointer$return_stack], eax
      finish if
   \}

   }
   #+end_src
** ----------------------------------
* -----------------------------------
* next
  #+begin_src fasm :tangle cicada-nymph.fasm
  match =64bit, machine {

  macro next \{
     pop_return_stack rbx
       mov rax, qword [rbx]
     add rbx, jo_size
     push_return_stack rbx
       jmp qword [rax]
  \}

  }


  match =32bit, machine {

  macro next \{
     pop_return_stack ebx
       mov eax, dword [ebx]
     add ebx, jo_size
     push_return_stack ebx
       jmp dword [eax]
  \}

  }
  #+end_src
* note play with jo & jojo
  1. at the beginning
     * argument-stack
       << 2 >>
     * return-stack
       #+begin_src return-stack
       - [ (square) ]
           (square)
           (end)
       #+end_src
  2. next
     * argument-stack
       << 2 >>
     * return-stack
       #+begin_src return-stack
           (square)
       - [ (square) ] - [ (dup) ]
           (end)          (multiple)
                          (end)
       #+end_src
  3. next
     * argument-stack
       << 2, 2 >>
     * return-stack
       #+begin_src return-stack
           (square)       (dup)
       - [ (square) ] - [ (multiple) ]
           (end)          (end)
       #+end_src
  4. next
     * argument-stack << 4 >>
     * return-stack
       #+begin_src return-stack
                          (dup)
           (square)       (multiple)
       - [ (square) ] - [ (end) ]
           (end)
       #+end_src
  5. next
     * argument-stack << 4 >>
     * return-stack
       #+begin_src return-stack
           (square)
           (square)
       - [ (end) ] - [ (dup) ]
                       (multiple)
                       (end)
       #+end_src
  6. next
     * argument-stack
       << 4, 4 >>
     * return-stack
       #+begin_src return-stack
           (square)
           (square)    (dup)
       - [ (end) ] - [ (multiple) ]
                       (end)
       #+end_src
  7. next
     * argument-stack
       << 16 >>
     * return-stack
       #+begin_src return-stack
           (square)    (dup)
           (square)    (multiple)
       - [ (end) ] - [ (end) ]
       #+end_src
  8. next
     * argument-stack
       << 16 >>
     * return-stack
       #+begin_src return-stack
           (square)
           (square)
       - [ (end) ]
       #+end_src
  9. next
     * argument-stack
       << 16 >>
     * return-stack
       #+begin_src return-stack
       - [  ]
       #+end_src
  10. it is really simple
      ^-^
      is it not ?
* -----------------------------------
* helper function in assembly code
** ----------------------------------
** __exit_with_TOS  [linux32]
   #+begin_src fasm :tangle cicada-nymph.fasm
   match =linux =32bit, platform machine {

   __exit_with_TOS:
      pop_argument_stack linux32_sys_1_ebx
      mov linux32_sys_n_eax, linux32_syscall_exit
      int 80h

   }
   #+end_src
** __exit_with_zero [linux32]
   #+begin_src fasm :tangle cicada-nymph.fasm
   match =linux =32bit, platform machine {

   __exit_with_zero:
      xor linux32_sys_1_ebx, linux32_sys_1_ebx
      mov linux32_sys_n_eax, linux32_syscall_exit
      int 80h

   }
   #+end_src
** __exit_with_six  [linux32]
   #+begin_src fasm :tangle cicada-nymph.fasm
   match =linux =32bit, platform machine {

   __exit_with_six:
      mov linux32_sys_1_ebx, 6
      mov linux32_sys_n_eax, linux32_syscall_exit
      int 80h

   }
   #+end_src
** ----------------------------------
* -----------------------------------
* macro for jo & explainer
** ----------------------------------
** link
   #+begin_src fasm :tangle cicada-nymph.fasm
   ;; initial link to point to 0 (as null)
   link = 0
   #+end_src
** ----------------------------------
** note primitive_string_heap
** memory allocation
   #+begin_src fasm :tangle cicada-nymph.fasm
   size$primitive_string_heap = 100 * 1024 ;; (byte)

   address$primitive_string_heap:
      times size$primitive_string_heap db 0

   current_free_address$primitive_string_heap = address$primitive_string_heap
   #+end_src
** make_primitive_string
   * 2 bytes for length of name_string
   * note that
     the following is using local label
   #+begin_src fasm :tangle cicada-nymph.fasm
   macro make_primitive_string string {

   virtual at 0
   .start$string:
      db string
   .end$string:
      dw (.end$string - .start$string)
      load .length word from (.end$string)
   finish virtual
   store word .length at (current_free_address$primitive_string_heap)

   current_free_address$primitive_string_heap = current_free_address$primitive_string_heap + 2

   repeat .length
      virtual at 0
         db string
         load .char byte from (% - 1)
      finish virtual
      store byte .char at (current_free_address$primitive_string_heap)
      current_free_address$primitive_string_heap = current_free_address$primitive_string_heap + 1
   finish repeat

   }
   #+end_src
** ----------------------------------
** note
   * note that
     after a "next" "jmp" to a explainer
     the "rax" stores the value of the jo to be explained
     so
     "rax" is used as an inexplicit argument
     of the following functions
   * explain$function is used as jojo-head
     and explains the meaning of the jojo as function
   * a jojo-head identifies one type of jo
** define_function
   #+begin_src fasm :tangle cicada-nymph.fasm
   macro define_function string, jo {

   define_function__#jo:

   name__#jo:
      xx current_free_address$primitive_string_heap

      make_primitive_string string

   link__#jo:
      xx link
      link = link__#jo

   jo:
      xx explain$function

      ;; here follows a jojo as function-body

   }
   #+end_src
** explain$function
   * find a jojo from a function-jo
     and push the jojo to return-stack
   * a jojo can not be of size 0
   * use rax as an argument
     which stores a jo
   #+begin_src fasm :tangle cicada-nymph.fasm
   match =64bit, machine {

   explain$function:
      add rax, jo_size
      push_return_stack rax
      next

   }


   match =32bit, machine {

   explain$function:
      add eax, jo_size
      push_return_stack eax
      next

   }
   #+end_src
** ----------------------------------
** note
   * primitive functions are special
     they explain themself
     and their type is not identified by jojo-head
** define_primitive_function
   #+begin_src fasm :tangle cicada-nymph.fasm
   macro define_primitive_function string, jo {

   define_primitive_function__#jo:

   name__#jo:
      xx current_free_address$primitive_string_heap

      make_primitive_string string

   link__#jo:
      xx link
      link = link__#jo

   jo:
      xx assembly_code__#jo

   assembly_code__#jo:

      ;; here follows assembly code
      ;; as primitive function body

   }
   #+end_src
** ----------------------------------
** note
   * no constant
     only variable
   * when a variable jo in the jojo
     it push the value of the variable to argument_stack
   * when wish to change a variable's value
     use key_word "address" to get the address of the variable
** define_variable
   #+begin_src fasm :tangle cicada-nymph.fasm
   macro define_variable string, jo {

   define_variable__#jo:

   name__#jo:
      xx current_free_address$primitive_string_heap

      make_primitive_string string

   link__#jo:
      xx link
      link = link__#jo

   jo:
      xx explain$variable

      ;; here follows a value of jo_size
      ;; only one value is allowed

   }
   #+end_src
** explain$variable
   #+begin_src fasm :tangle cicada-nymph.fasm
   match =64bit, machine {

   explain$variable:
      add rax, jo_size
      mov rbx, [rax]
      push_argument_stack rbx
      next

   }


   match =32bit, machine {

   explain$variable:
      add eax, jo_size
      mov ebx, [eax]
      push_argument_stack ebx
      next

   }
   #+end_src
** ----------------------------------
** *primitive-string-heap*
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_variable "*primitive-string-heap*", V__primitive_string_heap
     xx address$primitive_string_heap

   define_variable "*size,primitive-string-heap*", V__size__primitive_string_heap
     xx size$primitive_string_heap

   ;; *current-free-address,primitive-string-heap*
   ;; is at epilog
   #+end_src
* -----------------------------------
* end & taca
** end
   #+begin_src fasm :tangle cicada-nymph.fasm
   match =64bit, machine {

   define_primitive_function "end", end
      pop_return_stack rbx
      next
   }


   match =32bit, machine {

   define_primitive_function "end", end
      pop_return_stack ebx
      next

   }
   #+end_src
** taca
   * tail-call
   #+begin_src fasm :tangle cicada-nymph.fasm
   match =64bit, machine {

   define_primitive_function "<>", taca
      pop_return_stack rbx
      mov rax, qword [rbx]
      jmp qword [rax]
   }


   match =32bit, machine {

   define_primitive_function "<>", taca
      pop_return_stack ebx
      mov eax, dword [ebx]
      jmp dword [eax]
   }
   #+end_src
** note explicit tail call in action
   1. the tail position of a function body must be recognized
      explicit tail call is used to achieve this
   2. thus
      tail-recursive-call can be use to do loop
      without pushing too many address into return-stack
   3. for example if we have a function
      which is called "example"
      #+begin_src fasm
      define_function "example", example
         xx fun1
         xx fun2
         xx taca, example
      #+end_src
   4. and we have the following jojo in return-stack
      #+begin_src return-stack
      - [ (example) ]
          (end)
      #+end_src
   5. next
      #+begin_src return-stack
          (example)
      - [ (end) ] - [ (fun1) ]
                      (fun2)
                      (taca)
                      (example)
      #+end_src
   6. next
      #+begin_src return-stack
          (example)   (fun1)
      - [ (end) ] - [ (fun2) ]
                      (taca)
                      (example)
      #+end_src
   7. next
      #+begin_src return-stack
                      (fun1)
          (example)   (fun2)
      - [ (end) ] - [ (taca) ]
                      (example)
      #+end_src
   8. next
      by the definition of taca
      #+begin_src return-stack
          (example)
      - [ (end) ] - [ (fun1) ]
                      (fun2)
                      (taca)
                      (example)
      #+end_src
   9. you can see return-stack of (8.)
      is the same as (5.)
      it is clear how the example function
      is actually a loop now
* -----------------------------------
* *the story begin*
** begin_to_interpret_threaded_code [linux32]
   #+begin_src fasm :tangle cicada-nymph.fasm
   match =linux =32bit, platform machine {

   begin_to_interpret_threaded_code:

      cld ;; set DF = 0, then rsi and rdi are incremented

      mov eax, first_jojo
      push_return_stack eax
      next

   }
   #+end_src
** first_jojo
   * you can use the following "xx little_test"
     to do some little tests
   #+begin_src fasm :tangle cicada-nymph.fasm
   first_jojo:
      xx little_test
   #+end_src
** exit_with_TOS a.k.a. bye
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_primitive_function "bye", exit_with_TOS
      call __exit_with_TOS
   #+end_src
** little_test
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_variable "", V__little_test_number
      xx 3


   define_function "little_test", little_test

      ;;;; variable
      xx V__little_test_number
      xx exit_with_TOS
      ;;;; 3
   #+end_src
* -----------------------------------
* epilog
** ----------------------------------
** *un-initialized-memory*
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_variable "*un-initialized-memory*", V__un_initialized_memory
     xx address$un_initialized_memory

   define_variable "*size,un-initialized-memory*", V__size__un_initialized_memory
     xx size$un_initialized_memory

   define_variable "*current-free-address,un-initialized-memory*", V__current_free_address__un_initialized_memory
     xx current_free_address$un_initialized_memory
   #+end_src
** ----------------------------------
** *current-free-address,primitive-string-heap*
   * the last_primitive_string_in_assembly
     is just "*current-free-address,primitive-string-heap*"
   #+begin_src fasm :tangle cicada-nymph.fasm
   define_variable "*current-free-address,primitive-string-heap*", V__current_free_address__primitive_string
      xx current_free_address$primitive_string_heap
   #+end_src
** ----------------------------------
** last_link
   * this word helps to initialize V__first_jo_in_dictionary
   #+begin_src fasm :tangle cicada-nymph.fasm
   last_link = link
   #+end_src
** ----------------------------------
** un_initialized_memory [linux32]
   #+begin_src fasm :tangle cicada-nymph.fasm
   match =linux =32bit, platform machine {

   size$un_initialized_memory = 64 * 1024 * 1024 ;; (byte)

   segment readable writeable
   address$un_initialized_memory:
      rb size$un_initialized_memory

   }
   #+end_src
** ----------------------------------
* ===================================
