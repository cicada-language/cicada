#+TITLE:  小蟬語核 / core of cicada-nymph
#+AUTHOR: 謝宇恆 / XIE Yuheng
#+EMAIL:  xyheme@gmail.com

* todo
** more and better report
   * syntax defined
     and syntax useing
** wrap more syscalls
** about load-file
   * nested load-file
     a stack of allocate buffers in another local-data-heap
     the previous local-data-heap maybe should be called local-data-vector
   * load-file should maintain a list of loaded files
     what else meta data should be maintained ?
     can them make up a well module system ?
** home-path & search-path to load files
   * poi denotes path-organizer
   * 實現 條件性的被解釋的代碼
     這樣就能實現
     1. little-tester
     2. 在不同的平臺下執行不同的代碼
** debug-REPL
** [really needed] error handling for io function
   * write-file 可能遇到磁盤滿載的情況
** fixnum in other base
** round-heap for string literal in REPL
   * 使用新的語法擴展機制
     這在於對 '"' 這個語關鍵詞的變更
   * 也就是說
     還是要實現這個語法兩次了
   * 也就是說在編譯器開始執行的時候
     會入棧一些編譯器所需要用到的語法
     而運行結束之後
     又把這些語法出棧
** more design about the command-line-interface
** little tester
** re-design the color of cicada-nymph-mode and re-write the emacs-lisp code
** [how] variable must be able to store string
** name-hash-table
   * better factoring
   * better naming
** title-name-table
** data-giver
** syntax for exception handling in cicada-nymph
** big number and 同餘方程
   * 爲了玩 hash-table
* ===================================
* note
** notation
   * use ","
** data section in cicada-nymph
* ===================================
* misc
  #+begin_src cicada-nymph :tangle core.cn
  : cr << cr denotes carriage return >>
    << -- >>
    10 write-byte
    end
  ; define-function
  #+end_src
* macro
** if & else & then
   * one predicate can make two branchs
     three predicates can make four branchs
     three predicates may only make three branchs
     but indeed there must be an invisible branch
   #+begin_src cicada-nymph :tangle core.cn
   : if
     << string[address, length] --
        address, string[address, length] >>
     *false?branch* save-into,jo-heap
     *current-free-address,jo-heap* xx|swap|x
     0 save-into,jo-heap
     end
   ; define-macro

   : else
     << address, string[address, length] --
        address, string[address, length] >>
     *branch* save-into,jo-heap
     x|swap|xx
     *current-free-address,jo-heap* xxx|swap|x
     0 save-into,jo-heap
     << address, string[address, length], address >>
     *current-free-address,jo-heap*
     over sub *jo-size* div
     swap save
     end
   ; define-macro

   : then
     << address, string[address, length] --
        string[address, length] >>
     x|swap|xx
     *current-free-address,jo-heap*
     over sub *jo-size* div
     swap save
     end
   ; define-macro
   #+end_src
** test if & else & then
   #+begin_src cicada-nymph :tangle core.cn.test
   : kkk
     "kkk took my baby away !" write-string
     cr
     end
   ; define-function

   : factorial
     << number -- number >>
     dup
     one? if
       end
     then
     dup sub1 factorial
     mul
     end
   ; define-function

   : factorial,test
     cr
     1 factorial . cr
     2 factorial . cr
     3 factorial . cr
     4 factorial . cr
     5 factorial . cr
     6 factorial . cr
     7 factorial . cr
     8 factorial . cr
     9 factorial . cr
     10 factorial . cr
     11 factorial . cr
     12 factorial . cr
     13 factorial . cr
     14 factorial . cr
     15 factorial . cr
     16 factorial . cr
     17 factorial . cr
     18 factorial . cr
     19 factorial . cr
     20 factorial . cr
     end
   ; define-function

   : .12
     << 1 2 -- >>
     2 equal? if
       "(^-^)" write-string
       1 equal? if
         "\^o^/" write-string
       else
         "     " write-string
       then
     else
       "     " write-string
       1 equal? if
         "\^o^/" write-string
       else
         "     " write-string
       then
     then
     end
   ; define-function

   : .12,test
     cr
     1 2 .12 cr
     6 2 .12 cr
     1 6 .12 cr
     6 6 .12 cr
     end
   ; define-function


   factorial,test
   .12,test
   #+end_src
** jo
   * currently the same as the macro (address)
   #+begin_src cicada-nymph :tangle core.cn
   : jo
     << string[address, length] --
        string[address, length] >>
     *literal* save-into,jo-heap
     dup2
     string-head,word find if
       save-into,jo-heap
       string-tail,word
       end
     then
     "* (make-jojo (jo)) the word follows (jo) is undefined : " .s
     !undo-make-jojo
   ; define-macro
   #+end_src
* execute-word & basic-REPL           :redefine:
  * to protect macro & exception from be called from basic-REPL
  #+begin_src cicada-nymph :tangle core.cn
  : execute-word
    << word[address, length] -- unknown >>
    dup2 integer-string? if
      string->integer
      end
    then
    dup2
    find if
      dup macro-jo? if
        drop
        "* (execute-word) can not execute macro directly : " write-string
        write-string cr
        end
      then
      dup exception-jo? if
        drop
        "* (execute-word) can not execute exception directly : " write-string
        write-string cr
        end
      then
      << function & primitive-function & variable >>
      xx|swap|x drop2
      execute-jo
      end
    else
    "* (execute-word) meets undefined word : " write-string
    write-string cr
    then
    end
  ; define-function

  : basic-REPL
    << unknown -- unknown >>
    read-word-for-REPL
    execute-word
    <> basic-REPL
  ; define-function

  basic-REPL
  #+end_src
* allocate
** note
   * an interface of *un-initialized-memory*
** clear-memory [not using]
   * this kinds of functions
     must be implemented in assembly code
   #+begin_src cicada-nymph
   : clear-memory
     << size, address -- >>
     over zero? if
       drop2
       end
     then
     0 over save
     add1 swap
     sub1 swap
     <> clear-memory
   ; define-function
   #+end_src
** allocate-memory
   #+begin_src cicada-nymph :tangle core.cn
   : allocate-memory
     << size -- address >>
     dup *current-free-address,un-initialized-memory* clear-memory
     *current-free-address,un-initialized-memory* swap << address as return value >>
     address *current-free-address,un-initialized-memory* add-save
     end
   ; define-function
   #+end_src
* init-syscall-number
  #+begin_src cicada-nymph :tangle core.cn
  0 : :syscall-number,open:  ; define-variable
  0 : :syscall-number,close: ; define-variable
  0 : :syscall-number,read:  ; define-variable
  0 : :syscall-number,write: ; define-variable
  0 : :syscall-number,exit:  ; define-variable
  0 : :syscall-number,times: ; define-variable

  : init-syscall-number
    << -- >>
    *jo-size* 8 equal? if
      2   address :syscall-number,open:  save
      3   address :syscall-number,close: save
      0   address :syscall-number,read:  save
      1   address :syscall-number,write: save
      60  address :syscall-number,exit:  save
      100 address :syscall-number,times: save
      end
    then
    *jo-size* 4 equal? if
      5   address :syscall-number,open:  save
      6   address :syscall-number,close: save
      3   address :syscall-number,read:  save
      4   address :syscall-number,write: save
      1   address :syscall-number,exit:  save
      43  address :syscall-number,times: save
      end
    then
    end
  ; define-function

  init-syscall-number
  #+end_src
* report
** welcome
   #+begin_src cicada-nymph :tangle core.cn
   : welcome
     << -- >>
     "* welcome to cicada-nymph ^-^" .s
     end
   ; define-function
   #+end_src
** report-dictionary
*** report-dictionary,primitive-function
    #+begin_src cicada-nymph :tangle core.cn
    : loop,report-dictionary,primitive-function
      << counter, jo -- total >>
      dup zero? if
        drop
        end
      then
      dup primitive-function-jo? false? if
        jo->pre-jo
        <> loop,report-dictionary,primitive-function
      then
      swap
        "  " write-string
        add1 dup .
      swap
      dup jo->name
      dup2 space-string? if
        drop2
        " un-named " write-string cr
      else
        write-string cr
      then
      jo->pre-jo
      <> loop,report-dictionary,primitive-function
    ; define-function

    : report-dictionary,primitive-function
      << -- >>
      "* all primitive-function in dictionary :" write-string cr
      0 *first-jo-in-dictionary*
      loop,report-dictionary,primitive-function
      end
    ; define-function
    #+end_src
*** report-dictionary,function
    #+begin_src cicada-nymph :tangle core.cn
    : loop,report-dictionary,function
      << counter, jo -- total >>
      dup zero? if
        drop
        end
      then
      dup function-jo? false? if
        jo->pre-jo
        <> loop,report-dictionary,function
      then
      swap
        "  " write-string
        add1 dup .
      swap
      dup jo->name
      dup2 space-string? if
        drop2
        " un-named " write-string cr
      else
        write-string cr
      then
      jo->pre-jo
      <> loop,report-dictionary,function
    ; define-function

    : report-dictionary,function
      << -- >>
      "* all function in dictionary :" write-string cr
      0 *first-jo-in-dictionary*
      loop,report-dictionary,function
      end
    ; define-function
    #+end_src
*** report-dictionary,macro
    #+begin_src cicada-nymph :tangle core.cn
    : loop,report-dictionary,macro
      << counter, jo -- total >>
      dup zero? if
        drop
        end
      then
      dup macro-jo? false? if
        jo->pre-jo
        <> loop,report-dictionary,macro
      then
      swap
        "  " write-string
        add1 dup .
      swap
      dup jo->name
      dup2 space-string? if
        drop2
        " un-named " write-string cr
      else
        write-string cr
      then
      jo->pre-jo
      <> loop,report-dictionary,macro
    ; define-function

    : report-dictionary,macro
      << -- >>
      "* all macro in dictionary :" write-string cr
      0 *first-jo-in-dictionary*
      loop,report-dictionary,macro
      end
    ; define-function
    #+end_src
*** report-dictionary,exception
    #+begin_src cicada-nymph :tangle core.cn
    : loop,report-dictionary,exception
      << counter, jo -- total >>
      dup zero? if
        drop
        end
      then
      dup exception-jo? false? if
        jo->pre-jo
        <> loop,report-dictionary,exception
      then
      swap
        "  " write-string
        add1 dup .
      swap
      dup jo->name
      dup2 space-string? if
        drop2
        " un-named " write-string cr
      else
        write-string cr
      then
      jo->pre-jo
      <> loop,report-dictionary,exception
    ; define-function

    : report-dictionary,exception
      << -- >>
      "* all exception in dictionary :" write-string cr
      0 *first-jo-in-dictionary*
      loop,report-dictionary,exception
      end
    ; define-function
    #+end_src
*** report-dictionary,variable
    #+begin_src cicada-nymph :tangle core.cn
    : loop,report-dictionary,variable
      << counter, jo -- total >>
      dup zero? if
        drop
        end
      then
      dup variable-jo? false? if
        jo->pre-jo
        <> loop,report-dictionary,variable
      then
      swap
        "  " write-string
        add1 dup .
      swap
      dup jo->name
      dup2 space-string? if
        drop2
        " un-named " write-string cr
      else
        write-string cr
      then
      jo->pre-jo
      <> loop,report-dictionary,variable
    ; define-function

    : report-dictionary,variable
      << -- >>
      "* all variable in dictionary :" write-string cr
      0 *first-jo-in-dictionary*
      loop,report-dictionary,variable
      end
    ; define-function
    #+end_src
*** report-dictionary
    * different types of words in dictionary
      are showed separately
    #+begin_src cicada-nymph :tangle core.cn
    : report-dictionary
      << -- >>
      report-dictionary,primitive-function
      report-dictionary,function
      report-dictionary,macro
      report-dictionary,exception
      report-dictionary,variable
      "* totally : " write-string
      add add add add . cr
      end
    ; define-function
    #+end_src
** report-memory
   #+begin_src cicada-nymph :tangle core.cn
   : report-memory
     << -- >>
     "* *un-initialized-memory*" write-string cr
     "  * size : " write-string
          *size,un-initialized-memory*
          . cr
     "  * used : " write-string
          *current-free-address,un-initialized-memory*
          *un-initialized-memory*
          sub . cr
     "  * free : " write-string
          *size,un-initialized-memory*
          *current-free-address,un-initialized-memory*
          *un-initialized-memory*
          sub sub . cr
     "* *primitive-string-heap*" write-string cr
     "  * size : " write-string
          *size,primitive-string-heap*
          . cr
     "  * used : " write-string
          *current-free-address,primitive-string-heap*
          *primitive-string-heap*
          sub . cr
     "  * free : " write-string
          *size,primitive-string-heap*
          *current-free-address,primitive-string-heap*
          *primitive-string-heap*
          sub sub . cr
     "* *jo-heap*" write-string cr
     "  * size : " write-string
          *size,jo-heap* . cr
     "  * used : " write-string
          *current-free-address,jo-heap*
          *jo-heap*
          sub . cr
     "  * free : " write-string
          *size,jo-heap*
          *current-free-address,jo-heap*
          *jo-heap*
          sub sub . cr
     end
   ; define-function
   #+end_src
** report-platform
   #+begin_src cicada-nymph :tangle core.cn
   : report-platform
     << -- >>
     "* platform : " write-string
     platform write-string
     cr
     end
   ; define-function
   #+end_src
** report-jo-size
   #+begin_src cicada-nymph :tangle core.cn
   : report-jo-size
     << -- >>
     "* jo-size : " write-string
     *jo-size* write-nature-number
     " bytes" write-string
     cr
     end
   ; define-function
   #+end_src
** report-machine-word-size
   #+begin_src cicada-nymph :tangle core.cn
   : report-machine-word-size
     << -- >>
     "* machine-word-size : " write-string
     *jo-size* 8 mul write-nature-number
     " bits" write-string
     cr
     end
   ; define-function
   #+end_src
** initial-report
   #+begin_src cicada-nymph :tangle core.cn
   : initial-report
     << -- >>
     "* initial-report : " write-string cr
     "  " write-string report-platform
     "  " write-string report-machine-word-size
     "  " write-string report-jo-size
     end
   ; define-function
   #+end_src
** report-loaded-core-file
   #+begin_src cicada-nymph :tangle core.cn
   : report-loaded-core-file
     << -- >>
     "* loaded-core-file : " .s
     "    " write-string
     get-path,loaded-core-file .s
     end
   ; define-function
   #+end_src
** hi
   #+begin_src cicada-nymph :tangle core.cn
   0
   : *hi,random-base*
   ; define-variable

   : hi,random
     << -- random-number >>
     0 :syscall-number,times:
     1 syscall
     13 mod
     <<
      *hi,random-base*
      *hi,random-base* add1 13 mod
      address *hi,random-base* save
     >>
     end
   ; define-function

   : hi,say
     << number -- >>
     dup 0 equal? if drop "* do not forget to eat good good coder !" .s end then
     dup 1 equal? if drop "* me wile moku e pona moku ^-^" .s end then
     dup 2 equal? if drop "* cica cica da yaya !!!" .s end then
     dup 3 equal? if drop "* hi ^-^" .s end then
     dup 4 equal? if drop "* hello :)" .s end then
     dup 5 equal? if drop "* hey *^-^*" .s end then
     dup 6 equal? if drop "* hiya \^o^/" .s end then
     dup 7 equal? if drop "* I wish you a lovely day" .s end then
     dup 8 equal? if drop "* I wish you a lovely day { or night :P }" .s end then
     dup 9 equal? if drop "* o.o" .s end then
     drop "* lovely ^3^" .s end
   ; define-function

   : hi
     << -- >>
     hi,random
     hi,say
     end
   ; define-function
   #+end_src
* stack-REPL
** note
   * print argument-stack in every loop
** print-argument-stack
   #+begin_src cicada-nymph :tangle core.cn
   : print-argument-stack,loop
     << address, counter -- >>
     dup zero? if
       drop2
       end
     then
     sub1 swap
       dup fetch .
     *jo-size* add
     swap
     <> print-argument-stack,loop
   ; define-function

   : print-argument-stack
     << -- >>
     snapshot-the-stack-pointer
     *the-stack-pointer-snapshot*
     *the-stack* greater-or-equal? if
       *the-stack*   << address as return value >>
       *the-stack-pointer-snapshot* *the-stack* sub
       *jo-size* div << counter as return value >>
       print-argument-stack,loop
       end
     then
     "BELOW THE STACK " write-string
     end
   ; define-function
   #+end_src
** print-argument-stack,pretty
   #+begin_src cicada-nymph :tangle core.cn
   : print-argument-stack,pretty
     << -- >>
     snapshot-the-stack-pointer
     cr
     " * " write-string
        *the-stack-pointer-snapshot*
        *the-stack* sub
        << ad hoc for the BUG of div >>
        dup negative? if
          negate
          *jo-size* div
          negate
        else
          *jo-size* div
        then
        write-integer
     " * " write-string
     " -- " write-string
       print-argument-stack
     "--" write-string
     cr
     end
   ; define-function
   #+end_src
** stack-REPL
   #+begin_src cicada-nymph :tangle core.cn
   : stack-REPL
     << unknown -- unknown >>
     read-word-for-REPL
     execute-word
     print-argument-stack,pretty
     <> stack-REPL
   ; define-function
   #+end_src
* -----------------------------------
* port
** 記 關於輸入輸出
* file-tree
** 記 關於接口
   * 底層的 IO 函數我還不知道應該如何設計
     但是相對高層的根文件的簡單讀寫有關的函數
     已經基本確定了
     其特點是
     簡化掉 port 這個參數
     所有的函數都以路徑爲參數
** note
   * file-tree is a database
     the following interface is provided
     1. add
     2. sub
     3. up
     4. find
     5. list
   * a path is always one of the needed argument
** note macro about path
   #+begin_src cicada-nymph
   {path: home xyh cicada core.cn}
   "/home/xyh/cicada/core.cn"

   {path: home xyh cicada}
   "/home/xyh/cicada"

   << +working+ "." >>
   {path: +working+ core.cn}
   "./core.cn"

   << +parent+ ".." >>
   {path: +parent+ cicada core.cn}
   "../cicada/core.cn"

   << +library+ "/home/xyh/.cicada/library" >>
   {path: +library+ kkk main.cn}
   "/home/xyh/.cicada/library/kkk/main.cn"
   #+end_src
* path
** relative-path?
** full-path?
* poi
** note
   * poi denotes path-organizer
     it can give a name to a path
     one path one name
     it is designed for (load-file)
** note two directories
   * two directories to store the name path record
     1. user :
        "/home/<user>/.cicada/poi"
     2. system :
        "/etc/cicada/poi"
   * note that
     these two directories are viewed as one by poi
     no such things like
     user overriding system will happen
     one name can only exist in one of the two directories
     more on this in the following note
** note interface for command-line-function
   * cn poi add  <name> <relative-path>
   * cn poi sub  <name>
   * cn poi up   <name> <relative-path>
   * cn poi show <name>
   * cn poi list
   * <relative-path> is converted to <full-path>
     with the help of working-directory
   * <relative-path> is in the format of
     "./dictionary/file"
     "./dictionary/dictionary"
     note that
     for a <relative-path> of dictionary
     not tailing "/" should be added
** note interface for load-file
   * a path can be a file or a directory
     1. file
        "name" load-file
     2. directory
        "name/file" load-file
        note that
        use "name/file"
        instead of "name/file.cn"
** note interface in cicada-nymph code
   * poi should not be called in cicada-nymph code
** help
   #+begin_src cicada-nymph :tangle core.cn
   : poi,help
     << -- >>

     end
   ; define-function
   #+end_src
** add
   #+begin_src cicada-nymph :tangle core.cn
   : poi,add
     << name[address, length], relative-path[address, length] -- >>

     end
   ; define-function
   #+end_src
** sub
   #+begin_src cicada-nymph :tangle core.cn
   : poi,sub
     << name[address, length] -- >>

     end
   ; define-function
   #+end_src
** up
   * up denotes update
   #+begin_src cicada-nymph :tangle core.cn
   : poi,up
     << name[address, length], relative-path[address, length] -- >>

     end
   ; define-function
   #+end_src
** list
   #+begin_src cicada-nymph :tangle core.cn
   : poi,list
     << -- >>

     end
   ; define-function
   #+end_src
** show
   #+begin_src cicada-nymph :tangle core.cn
   : poi,show
     << name[address, length] -- >>

     end
   ; define-function
   #+end_src
* load-file
** ><
   #+begin_src cicada-nymph :tangle core.cn
   : load-file
     << ??? -- >>

     end
   ; define-function
   #+end_src
* >< little-tester
** note
** ><
* -----------------------------------
* >< fixnum in other base
** ><
   #+begin_src cicada-nymph :tangle core.cn

   #+end_src
* -----------------------------------
* name-hash-table
** note naming & factoring
   * open addressing
     for we do not need to delete
   * math
     * hash
     * probe
   * memory
     * insert
     * search
   * function
     * map
     * reverse
** memory allocation
   * the following are some prime number
     ready to be used
     * 1000003   about 976 k
     * 1000033
     * 1000333
     * 100003    about 97 k
     * 100333
     * 997
     * 499
   #+begin_src cicada-nymph :tangle core.cn
   100333 drop
   13
   : *name-hash-table,size*
   ; define-variable

   *jo-size* 4 mul
   : *name-hash-table,unit*
   ; define-variable

   *name-hash-table,size*
   *name-hash-table,unit* mul
   allocate-memory
   : *name-hash-table*
   ; define-variable

   0
   : *name-hash-table,counter*
   ; define-variable
   #+end_src
** hash
   * prime table size
   * linear probing
   #+begin_src cicada-nymph :tangle core.cn
   : name-hash-table,hash
     << number, counter -- index >>
     add *name-hash-table,size* mod
     end
   ; define-function
   #+end_src
** string->finite-carry-sum
   #+begin_src cicada-nymph :tangle core.cn
   16
   : *max-carry-position*
   ; define-variable

   : string->finite-carry-sum,loop
     << carry-sum, string[address, length], counter -- carry-sum >>
     over zero? if
       drop drop2
       end
     then
     dup *max-carry-position* greater-than? if
       drop 0 << re-start from 0 >>
     then
     xx|over|x
     string-head,char over
     2 swap power
     mul
     x|swap|xxxx add xxx|swap|x
     add1 xx|swap|x
     string-tail,char x|swap|xx
     <> string->finite-carry-sum,loop
   ; define-function

   : string->finite-carry-sum
     << string[address, length] -- carry-sum >>
     0 xx|swap|x << carry-sum >>
     0 << counter >>
     string->finite-carry-sum,loop
     end
   ; define-function
   #+end_src
** name
*** note
    * a name is an index into name-hash-table
    * an entry can be viewed
      1. as a point
      2. as an orbit
    * in a name entry we have the following fields
      |-------------------------------+-------------------------|
      |                               | note                    |
      |-------------------------------+-------------------------|
      | primitive-string              | 0 denotes               |
      | [address]                     | name not used           |
      |-------------------------------+-------------------------|
      | title                         | 0 denotes               |
      | [index into name-title-table] | name not used as title  |
      |-------------------------------+-------------------------|
      | orbit-length                  | as an orbit             |
      | [number]                      | its length gets updated |
      |-------------------------------+-------------------------|
      | orbiton                       | as a point              |
      | [address]                     | it is on an orbit       |
      |-------------------------------+-------------------------|
*** name->address
    #+begin_src cicada-nymph :tangle core.cn
    : name->address
      << name -- address >>
      *name-hash-table,unit* mul
      *name-hash-table* add
      end
    ; define-function
    #+end_src
*** name,used?
    #+begin_src cicada-nymph :tangle core.cn
    : name,used?
      << name -- bool >>
      name->address
      fetch zero? false?
      end
    ; define-function
    #+end_src
*** name,used-as-title?
    #+begin_src cicada-nymph :tangle core.cn
    : name,used-as-title?
      << name -- bool >>
      name->address
      *jo-size* add
      fetch zero?
      end
    ; define-function
    #+end_src
*** name,fetch-string
    #+begin_src cicada-nymph :tangle core.cn
    : name,fetch-string
      << name -- string[address, length] >>
      name->address
      fetch
      address->primitive-string
      end
    ; define-function
    #+end_src
*** name,fetch-title-index sadsfiljdasd
    #+begin_src cicada-nymph :tangle core.cn
    : name,fetch-title-index
      << name -- index >>
      name->address
      *jo-size* add
      fetch
      end
    ; define-function
    #+end_src
*** name,fetch-orbit-length
    #+begin_src cicada-nymph :tangle core.cn
    : name,fetch-orbit-length
      << name -- length >>
      name->address
      *jo-size* add
      *jo-size* add
      fetch
      end
    ; define-function
    #+end_src
*** name,fetch-orbiton
    #+begin_src cicada-nymph :tangle core.cn
    : name,fetch-orbiton
      << name -- address >>
      name->address
      *jo-size* add
      *jo-size* add
      *jo-size* add
      fetch
      end
    ; define-function
    #+end_src
*** name,save-string
    * note that
      primitive-string-heap is used
    #+begin_src cicada-nymph :tangle core.cn
    : name,save-string
      << string[address, length], name -- >>
      *current-free-address,primitive-string-heap*
      xx|swap|xx
      save-into,primitive-string-heap
      swap
      name->address
      save
      end
    ; define-function
    #+end_src
*** name,save-title-index
    #+begin_src cicada-nymph :tangle core.cn
    : name,save-title-index
      << index, name -- >>
      name->address
      *jo-size* add
      save
      end
    ; define-function
    #+end_src
*** name,save-orbit-length
    #+begin_src cicada-nymph :tangle core.cn
    : name,save-orbit-length
      << index, name -- >>
      name->address
      *jo-size* add
      *jo-size* add
      save
      end
    ; define-function
    #+end_src
*** name,save-orbiton
    #+begin_src cicada-nymph :tangle core.cn
    : name,save-orbiton
      << index, name -- >>
      name->address
      *jo-size* add
      *jo-size* add
      *jo-size* add
      save
      end
    ; define-function
    #+end_src
*** name,no-collision?
    #+begin_src cicada-nymph :tangle core.cn
    : name,no-collision?
      << name -- bool >>
      dup name,fetch-orbiton
      equal?
      end
    ; define-function
    #+end_src
** search
   #+begin_src cicada-nymph :tangle core.cn
   : name-hash-table,search,loop
     << string[address, length], number, counter
        -- name, true
        -- name, false >>
     >:counter >:number >::string
     :number :counter name-hash-table,hash
     >:name
     :number 0 name-hash-table,hash
     >:orbit
     :name name,used? false? if
       :name false
       end
     then
     :name name,fetch-string
     ::string string-equal? if
       :name true
       end
     then
     :name name,fetch-orbit-length
     :counter equal? if
       :name false
       end
     then
     ::string
     :number :counter add1
     <> name-hash-table,search,loop
   ; define-function

   : name-hash-table,search
     << string[address, length]
        -- name, true
        -- false >>
     dup2 string->finite-carry-sum
     0 name-hash-table,search,loop
     end
   ; define-function
   #+end_src
** insert
   * I found that (insert) can not re-use (search)
   #+begin_src cicada-nymph :tangle core.cn
   : name-hash-table,insert,loop
     << string[address, length], number, counter
        -- name, true
        -- name, false >>
     >:counter >:number >::string
     :number :counter name-hash-table,hash
     >:name
     :number 0 name-hash-table,hash
     >:orbit
     :name name,used? false? if
       ::string :name
       name,save-string
       :orbit :name
       name,save-orbiton
       :counter :orbit
       name,save-orbit-length
       1 address *name-hash-table,counter* add-save
       :name true
       end
     then
     :name name,fetch-string
     ::string string-equal? if
       :name true
       end
     then
     :counter *name-hash-table,size* equal? if
       :name false
       end
     then
     ::string
     :number :counter add1
     <> name-hash-table,insert,loop
   ; define-function

   : name-hash-table,insert
     << string[address, length]
        -- name, true
        -- name, false >>
     dup2 string->finite-carry-sum
     0 name-hash-table,insert,loop
     end
   ; define-function
   #+end_src
** string->name & name->string
   * error handling here
   #+begin_src cicada-nymph :tangle core.cn
   : string->name
     << string[address, length] -- name >>
     name-hash-table,insert
     false? if
       "* (string->name) *name-hash-table* IS FULL!" .s
       end
     then
     end
   ; define-function

   : name->string
     << name -- string[address, length]] >>
     name,fetch-string
     end
   ; define-function
   #+end_src
** test
   * set *name-hash-table,size* to a small number [for example 13]
     then use the following function
     and (name-hash-table,report) to do test
   #+begin_src cicada-nymph :tangle core.cn
   : name-hash-table,test
     << -- >>
     "a-000" string->name . cr
     "a-111" string->name . cr
     "a-222" string->name . cr
     "a-333" string->name . cr
     "a-444" string->name . cr
     "a-555" string->name . cr
     "a-666" string->name . cr
     "a-777" string->name . cr
     "a-888" string->name . cr
     "a-999" string->name . cr
     "b-000" string->name . cr
     "b-111" string->name . cr
     "b-222" string->name . cr
     "b-333" string->name . cr
     "b-444" string->name . cr
     "b-555" string->name . cr
     "b-666" string->name . cr
     "b-777" string->name . cr
     "b-888" string->name . cr
     "b-999" string->name . cr
     end
   ; define-function
   #+end_src
** note about report
   * report point orbit by orbit
     in the following format
   * {index} string # orbit-lenght
     * {index} string
     * {index} string
     * {index} string
   * if used as title
     add a (AS TITLE) as postfix
** report
   #+begin_src cicada-nymph :tangle core.cn
   : name-hash-table,report,orbit
     << name, counter -- >>
     over name,fetch-orbit-length
     over less-than? if
       drop2
       end
     then
     over name,fetch-string string->finite-carry-sum
     over name-hash-table,hash
     dup name,fetch-orbiton
     << name, counter, new-name, orbiton >>
     x|over|xxx name,fetch-string string->finite-carry-sum
     0 name-hash-table,hash
     equal? if
       "  {" write-string
       dup write-nature-number
       "} " write-string
       name,fetch-string write-string
       cr
     else
       drop
     then
     add1 <> name-hash-table,report,orbit
   ; define-function

   : name-hash-table,report,loop
     << name -- >>
     dup *name-hash-table,size* equal? if
       drop
       end
     then
     dup name,used? if
     dup name,no-collision? if
       << * {index} string # orbit-lenght >>
       "* {" write-string
       dup write-nature-number
       "} " write-string
       dup name,fetch-string write-string
       " # " write-string
       dup name,fetch-orbit-length
       write-nature-number
       cr
       dup 1 name-hash-table,report,orbit
     then
     then
     add1 <> name-hash-table,report,loop
   ; define-function

   : name-hash-table,report
     << -- >>
     0 name-hash-table,report,loop
     "* totally : " write-string
     *name-hash-table,counter* write-nature-number
     cr
     end
   ; define-function
   #+end_src
* -----------------------------------
* command-line-interface
** note
** command-line,unknow-function
   #+begin_src cicada-nymph :tangle core.cn
   : command-line,unknow-function
     << -- >>
     "* (cicada-nymph) unknow command-line-function : " write-string
     get-command-line
     string-tail,word
     string-head,word .s
     "* good bye ^-^/" .s
     bye
     end
   ; define-function
   #+end_src
** command-line,stack-REPL
   #+begin_src cicada-nymph :tangle core.cn
   : command-line,stack-REPL
     << -- >>
     welcome
     report-loaded-core-file
     initial-report
     hi
     "* you are in the (stack-REPL)" .s
     "  every time after a word is executed" .s
     "  the argument-stack get printed" .s
     print-argument-stack,pretty
     jo stack-REPL
     reset-top-level-REPL
   ; define-function
   #+end_src
** command-line,basic-REPL
   #+begin_src cicada-nymph :tangle core.cn
   : command-line,basic-REPL
     << -- >>
     welcome
     report-loaded-core-file
     initial-report
     hi
     "* you are in the (basic-REPL)" .s
     "  this REPL does not print any thing automaticly" .s
     jo basic-REPL
     reset-top-level-REPL
   ; define-function
   #+end_src
** command-line,poi
   #+begin_src cicada-nymph :tangle core.cn
   : command-line,poi
     << -- >>
     "* poi byebye" .s
     bye
     end
   ; define-function
   #+end_src
** command-line,no-function
   #+begin_src cicada-nymph :tangle core.cn
   : command-line,no-function
     << -- >>
     <> command-line,stack-REPL
   ; define-function
   #+end_src
** command-line-dispatcher
   #+begin_src cicada-nymph :tangle core.cn
   : command-line-dispatcher
     << -- >>
     get-command-line
     string-tail,word
     dup2 space-string? if
       drop2
       <> command-line,no-function
     then
     string-head,word
     >::1st-word
     ::1st-word "basic-REPL" string-equal? if
       <> command-line,basic-REPL
     then
     ::1st-word "stack-REPL" string-equal? if
       <> command-line,stack-REPL
     then
     ::1st-word "poi" string-equal? if
       <> command-line,poi
     then
       <> command-line,unknow-function
   ; define-function
   #+end_src
* *the-story-begin*
  #+begin_src cicada-nymph :tangle core.cn
  : the-story-begin
    << -- >>
    <> command-line-dispatcher
  ; define-function

  the-story-begin
  #+end_src
* -----------------------------------
* test
  #+begin_src cicada-nymph
  name-hash-table,test
  name-hash-table,report

  report-memory
  report-dictionary
  #+end_src
* ===================================
