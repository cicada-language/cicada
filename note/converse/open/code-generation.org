* 題記
  * 用更簡潔的語法
    來生成 簡單數據結構的 接口函數
* 討論 <2015-06-17>
  - x ::
       我將模仿 org-mode 中的 table 的語法
       首先要有一個數據結構描述語言
       然後 語法解析這個語言
       然後 利用所解析到的信息生成 數據結構接口
       我要求這個數據結構描述語言可以擴展
  - k ::
       先放下 擴展 不說
       看看基本的需求是什麼
       我想
       已經出現過的數據結構的例子 能夠覆蓋很多應用方面了
  - x ::
       沒錯
       我們來找幾個典型的例子
    1. <system-getdents64>
    2. name-hash-table
    3. rule-set
    4. 各種 stack
  - k ::
       可以發現所有這些在之前都是通過手動定義函數而處理的
       每次都有很多重複
       這些重複將用代碼生成機制來解決
  - x ::
       其實是這樣的
    1. <system-getdents64>
       有很多類似的接口
    2. name-hash-table
       目前還沒有類似的接口
    3. rule-set
       接口沒有重複
       但是在全局 生成一個 rule-set 的方式是手動進行的
       而不是用生成函數進行的
    4. 各種 stack
       有很多類似的接口
  - k ::
       我不認爲你能設計一個通用的代碼生成機制來解決上面的全部問題
  - x ::
       沒錯
       我就只生成以 set 和 get 爲前綴的東西
       每次存取只一個值
       但是好像不能只是一個值
       我必須能夠處理 string[address, length] 這種類型的值
       並且處理這種類型的值的將是一般的機制
       而不是只使用與 string
  - k ::
       問題其實已經可以簡化很多了
       只要知道每次 生成 get 和 set 的時候所需要的參數就行了
       可以發現參數並不是很多
       另外還有一點
       那就是可能有一些變長數據直接被分配在了數據結構中的一個大數據域中
  - x ::
       <system-getdents64>
       | ino    | 8 byte   |
       | off    | 8 byte   |
       | reclen | 2 byte   |
       | type   | 1 byte   |
       | name   | 256 byte |
       其中 name 就是直接分配在其中的 以 0 結尾的字符串
       而 <jo> 是地址不再開頭的例子
       |    | length    |
       | jo | explainer |
       |    | body      |
       另外 <link> 是帶有 string 的例子
       | link | link           |
       |      | jo             |
       |      | string-address |
       |      | string-length  |
  - k ::
       我想到了一個更加極端的例子
       那麼就是 ELF 等等 這些可執行文件格式
       一個 可執行文件格式 做爲數據結構是高度複雜的
       我們可以以它們爲例子來研究一下
  - x ::
       沒錯
       這些東西之後我們也會需要
       可執行文件格式
       還有 指令集編碼 也是極端的例子
  - k ::
       這寫其實代表了底層編程的特點
       不是嗎
  - x ::
       如果 cicada-nymph 可以被稱作 什麼什麼處理語言 的話
       那麼它就是這種類型的東西的處理語言
       這種底層的數據結構 所體現的 正是當前計算機構架本身的性質
  - k ::
       這更鼓勵我們要把這裏的代碼生成機制設計好了
  - x ::
       沒錯
       我之前甚至想要放棄
       但是現在看來這是極其重要的機制
       我先去找
       可執行文件格式 和 指令集編碼
       這連個極端的例子來研究一下
