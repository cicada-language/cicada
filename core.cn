: cr << cr denotes carriage return >>
  << -- >>
  10 write-byte
  end
; define-function

: if
  << string[address, length] --
     address, string[address, length] >>
  *false?branch* save-into,jo-heap
  *current-free-address,jo-heap* xx|swap|x
  0 save-into,jo-heap
  end
; define-macro

: else
  << address, string[address, length] --
     address, string[address, length] >>
  *branch* save-into,jo-heap
  x|swap|xx
  *current-free-address,jo-heap* xxx|swap|x
  0 save-into,jo-heap
  << address, string[address, length], address >>
  *current-free-address,jo-heap*
  over sub *jo-size* div
  swap save
  end
; define-macro

: then
  << address, string[address, length] --
     string[address, length] >>
  x|swap|xx
  *current-free-address,jo-heap*
  over sub *jo-size* div
  swap save
  end
; define-macro

: execute-word
  << word[address, length] -- unknown >>
  dup2 integer-string? if
    string->integer
    end
  then
  dup2
  find if
    dup macro-jo? if
      drop
      "* (execute-word) CAN NOT EXECUTE MACRO DIRECTLY : " write-string
      write-string cr
      end
    then
    dup exception-jo? if
      drop
      "* (execute-word) CAN NOT EXECUTE EXCEPTION DIRECTLY : " write-string
      write-string cr
      end
    then
    << function & primitive-function & variable >>
    xx|swap|x drop2
    execute-jo
    end
  else
  "* (execute-word) MEETS UNDEFINED WORD : " write-string
  write-string cr
  then
  end
; define-function

: basic-REPL
  << unknown -- unknown >>
  read-word-for-REPL
  execute-word
  <> basic-REPL
; define-function

basic-REPL

: allocate-memory
  << size -- address >>
  dup *current-free-address,un-initialized-memory* clear-memory
  *current-free-address,un-initialized-memory* swap << address as return value >>
  address *current-free-address,un-initialized-memory* add-save
  end
; define-function

: loop,show-dictionary,primitive-function
  << counter, jo -- total >>
  dup zero? if
    drop
    end
  then
  dup primitive-function-jo? false? if
    jo->pre-jo
    <> loop,show-dictionary,primitive-function
  then
  swap
    "  " write-string
    add1 dup .
  swap
  dup jo->name
  dup2 space-string? if
    drop2
    "UN-NAMED" write-string cr
  else
    write-string cr
  then
  jo->pre-jo
  <> loop,show-dictionary,primitive-function
; define-function

: show-dictionary,primitive-function
  << -- >>
  "* ALL PRIMITIVE-FUNCTION IN DICTIONARY :" write-string cr
  0 *first-jo-in-dictionary*
  loop,show-dictionary,primitive-function
  end
; define-function

: loop,show-dictionary,function
  << counter, jo -- total >>
  dup zero? if
    drop
    end
  then
  dup function-jo? false? if
    jo->pre-jo
    <> loop,show-dictionary,function
  then
  swap
    "  " write-string
    add1 dup .
  swap
  dup jo->name
  dup2 space-string? if
    drop2
    "UN-NAMED" write-string cr
  else
    write-string cr
  then
  jo->pre-jo
  <> loop,show-dictionary,function
; define-function

: show-dictionary,function
  << -- >>
  "* ALL FUNCTION IN DICTIONARY :" write-string cr
  0 *first-jo-in-dictionary*
  loop,show-dictionary,function
  end
; define-function

: loop,show-dictionary,macro
  << counter, jo -- total >>
  dup zero? if
    drop
    end
  then
  dup macro-jo? false? if
    jo->pre-jo
    <> loop,show-dictionary,macro
  then
  swap
    "  " write-string
    add1 dup .
  swap
  dup jo->name
  dup2 space-string? if
    drop2
    "UN-NAMED" write-string cr
  else
    write-string cr
  then
  jo->pre-jo
  <> loop,show-dictionary,macro
; define-function

: show-dictionary,macro
  << -- >>
  "* ALL MACRO IN DICTIONARY :" write-string cr
  0 *first-jo-in-dictionary*
  loop,show-dictionary,macro
  end
; define-function

: loop,show-dictionary,exception
  << counter, jo -- total >>
  dup zero? if
    drop
    end
  then
  dup exception-jo? false? if
    jo->pre-jo
    <> loop,show-dictionary,exception
  then
  swap
    "  " write-string
    add1 dup .
  swap
  dup jo->name
  dup2 space-string? if
    drop2
    "UN-NAMED" write-string cr
  else
    write-string cr
  then
  jo->pre-jo
  <> loop,show-dictionary,exception
; define-function

: show-dictionary,exception
  << -- >>
  "* ALL EXCEPTION IN DICTIONARY :" write-string cr
  0 *first-jo-in-dictionary*
  loop,show-dictionary,exception
  end
; define-function

: loop,show-dictionary,variable
  << counter, jo -- total >>
  dup zero? if
    drop
    end
  then
  dup variable-jo? false? if
    jo->pre-jo
    <> loop,show-dictionary,variable
  then
  swap
    "  " write-string
    add1 dup .
  swap
  dup jo->name
  dup2 space-string? if
    drop2
    "UN-NAMED" write-string cr
  else
    write-string cr
  then
  jo->pre-jo
  <> loop,show-dictionary,variable
; define-function

: show-dictionary,variable
  << -- >>
  "* ALL VARIABLE IN DICTIONARY :" write-string cr
  0 *first-jo-in-dictionary*
  loop,show-dictionary,variable
  end
; define-function

: show-dictionary
  << -- >>
  show-dictionary,primitive-function
  show-dictionary,function
  show-dictionary,macro
  show-dictionary,exception
  show-dictionary,variable
  "* TOTALLY : " write-string
  add add add add . cr
  end
; define-function

: report-memory
  << -- >>
  "* *un-initialized-memory*" write-string cr
  "  * SIZE : " write-string
       *size,un-initialized-memory*
       . cr
  "  * USED : " write-string
       *current-free-address,un-initialized-memory*
       *un-initialized-memory*
       sub . cr
  "  * FREE : " write-string
       *size,un-initialized-memory*
       *current-free-address,un-initialized-memory*
       *un-initialized-memory*
       sub sub . cr
  "* *primitive-string-heap*" write-string cr
  "  * SIZE : " write-string
       *size,primitive-string-heap*
       . cr
  "  * USED : " write-string
       *current-free-address,primitive-string-heap*
       *primitive-string-heap*
       sub . cr
  "  * FREE : " write-string
       *size,primitive-string-heap*
       *current-free-address,primitive-string-heap*
       *primitive-string-heap*
       sub sub . cr
  "* *jo-heap*" write-string cr
  "  * SIZE : " write-string
       *size,jo-heap* . cr
  "  * USED : " write-string
       *current-free-address,jo-heap*
       *jo-heap*
       sub . cr
  "  * FREE : " write-string
       *size,jo-heap*
       *current-free-address,jo-heap*
       *jo-heap*
       sub sub . cr
  end
; define-function

: test
  << -- >>
  "core.cn.test" load-file
  end
; define-function

: cicada
  << -- >>
  "cicada.cn" load-file
  end
; define-function

0
: *hi,random-base*
; define-variable

: hi,random
  << -- random-number >>
  *hi,random-base*
  *hi,random-base* add1 10 mod
  address *hi,random-base* save
  end
; define-function

: hi,say
  << number -- >>
  dup 1 equal? if drop " hi ^-^" .s end then
  dup 2 equal? if drop " hello :)" .s end then
  dup 3 equal? if drop " hey *^-^*" .s end then
  dup 4 equal? if drop " hiya \^o^/" .s end then
  dup 5 equal? if drop " I wish you a lovely day" .s end then
  dup 6 equal? if drop " I wish you a lovely day { or night :P }" .s end then
  drop " love love ^3^" .s end
; define-function

: hi
  << -- >>
  hi,random
  hi,say
  end
; define-function

: print-argument-stack,loop
  << address, counter -- >>
  dup zero? if
    drop2
    end
  then
  sub1 swap
    dup fetch .
  *jo-size* add
  swap
  <> print-argument-stack,loop
; define-function

: print-argument-stack
  << -- >>
  snapshot-the-stack-pointer
  *the-stack-pointer-snapshot*
  *the-stack* greater-or-equal? if
    *the-stack*   << address as return value >>
    *the-stack-pointer-snapshot* *the-stack* sub
    *jo-size* div << counter as return value >>
    print-argument-stack,loop
    end
  then
  "BELOW THE STACK " write-string
  end
; define-function

: stack-REPL
  << unknown -- unknown >>
  read-word-for-REPL
  execute-word
  snapshot-the-stack-pointer
  cr
  " * " write-string
     *the-stack-pointer-snapshot*
     *the-stack* sub
     << ad hoc for the BUG of div >>
     dup negative? if
       negate
       *jo-size* div
       negate
     else
       *jo-size* div
     then
     write-integer
  " * " write-string
  " -- " write-string
    print-argument-stack
  "--" write-string
  cr
  <> stack-REPL
; define-function

stack-REPL

hi
