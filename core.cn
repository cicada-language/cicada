: cr
  10 write-byte
  end
; define-function

: if
  << string[address, length] --
     address, string[address, length] >>
  *false?branch* save-into,jo-heap
  *current-free-address,jo-heap* xx|swap|x
  0 save-into,jo-heap
  end
; define-macro

: else
  << address, string[address, length] --
     address, string[address, length] >>
  *branch* save-into,jo-heap
  x|swap|xx
  *current-free-address,jo-heap* xxx|swap|x
  0 save-into,jo-heap
  << address, string[address, length], address >>
  *current-free-address,jo-heap*
  over sub *jo-size* div
  swap save
  end
; define-macro

: then
  << address, string[address, length] --
     string[address, length] >>
  x|swap|xx
  *current-free-address,jo-heap*
  over sub *jo-size* div
  swap save
  end
; define-macro

: execute-word
  << word[address, length] -- unknown >>
  dup2 integer-string? if
    string->integer
    end
  then
  dup2
  find if
    dup macro-jo? if
      drop
      "* (execute-word) CAN NOT EXECUTE MACRO DIRECTLY : " write-string
      write-string cr
      end
    then
    dup exception-jo? if
      drop
      "* (execute-word) CAN NOT EXECUTE EXCEPTION DIRECTLY : " write-string
      write-string cr
      end
    then
    << function & primitive-function & variable >>
    xx|swap|x drop2
    execute-jo
    end
  else
  "* (execute-word) MEETS UNDEFINED WORD : " write-string
  write-string cr
  then
  end
; define-function

: basic-REPL
  << unknown -- unknown >>
  read-word-for-REPL
  execute-word
  <> basic-REPL
; define-function

basic-REPL

: loop,show-dictionary
  << jo -- >>
  dup last-jo,dictionary? if
    jo->name
    write-string cr
    end
  then
  dup jo->name
  dup2 space-string? if
    drop2
  else
    write-string cr
  then
  jo->pre-jo
  <> loop,show-dictionary
; define-function

: show-dictionary
  << -- >>
  *first-jo-in-dictionary*
  loop,show-dictionary
  end
; define-function

: report-memory
  << -- >>
  "* *un-initialized-memory*" write-string cr
  "  * SIZE : " write-string
       *size,un-initialized-memory*
       . cr
  "  * USED : " write-string
       *current-free-address,un-initialized-memory*
       *un-initialized-memory*
       sub . cr
  "  * FREE : " write-string
       *size,un-initialized-memory*
       *current-free-address,un-initialized-memory*
       *un-initialized-memory*
       sub sub . cr
  "* *primitive-string-heap*" write-string cr
  "  * SIZE : " write-string
       *size,primitive-string-heap*
       . cr
  "  * USED : " write-string
       *current-free-address,primitive-string-heap*
       *primitive-string-heap*
       sub . cr
  "  * FREE : " write-string
       *size,primitive-string-heap*
       *current-free-address,primitive-string-heap*
       *primitive-string-heap*
       sub sub . cr
  "* *jo-heap*" write-string cr
  "  * SIZE : " write-string
       *size,jo-heap* . cr
  "  * USED : " write-string
       *current-free-address,jo-heap*
       *jo-heap*
       sub . cr
  "  * FREE : " write-string
       *size,jo-heap*
       *current-free-address,jo-heap*
       *jo-heap*
       sub sub . cr
  end
; define-function
